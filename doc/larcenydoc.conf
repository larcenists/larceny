# Run with this configuration file by typing:
# a2x --asciidoc-opts=--conf-file=larcenydoc.conf -f pdf     -D . UserManual/user-manual.txt 
# a2x --asciidoc-opts=--conf-file=larcenydoc.conf -f chunked -D . UserManual/user-manual.txt 
# etc...

# [replacements]
# => to a nicer right double arrow...
# Unfortunately, the pdf files we generate don't have the font for it...
#\=&gt;=&#8658;

[macros]

### Procedure Header macro:
# proc:foo[args="x y z",result="number"]           ==> {anchored at #foo}
#                                                  Procedure foo
#                                                  (foo x y z) => number
# proc:ProcBar[args="x",result="number",var="baz"] ==> {anchored at #ProcBar}
#                                                  Procedure baz
#                                                  (baz x) => number
# proc:bar2[args="none",result="string"]           ==> {anchored at #bar2}
#                                                  Procedure bar2
#                                                  (bar2) => string
# proc:ProcBazToo[var="baz2"]                      ==> {anchored at #ProcBazToo}
#                                                  Procedure baz2
# proc:ping[args="a b c",result="unspecified"]     ==> {anchored at #ping}
#                                                  Procedure ping
#                                                  (ping a b c) => unspecified
# proc:pong[args="a b c"]                          ==> {anchored at #pong}
#                                                  Procedure pong
#                                                  (pong a b c)
# (see also proctempl: below which is to be kept 
#  in sync with proc: (it just omits the header))

# asciidoc 8.3.0 dropped support for the macro definitions we'd been
# using, but the following gibberish restores support for the macros
# named in the regular expression that follows "?P<name>".

# Macros using default syntax.
(?su)(?<!\w)[\\]?(?P<name>proc|proctempl):(?P<target>\S*?)\[(?P<attrlist>.*?)(?<!\\)\]=

# FIXME: The following macros broke with asciidoc 8.3.0, which
# changed the syntax for macro definitions to a really ugly syntax
# based on Python regular expressions.

# [proc-inlinemacro]
# ifdef::basebackend-docbook[]
# <anchor id="{target}" xreflabel="{target}"></anchor>
# <emphasis>{kind? {kind}}{kind! Procedure} {var?{var}}{var!{target}}</emphasis>
# <simpara>
# <indexterm><primary><code>{var?{var}}{var!{target}}</code></primary></indexterm>
# <literal>({var?{var}}{var!{target}}{args@none:: <emphasis>{args}</emphasis>}{optarg? <emphasis>[{optarg}]</emphasis>}) {result? =&gt; <emphasis>{result}</emphasis>}</literal>
# </simpara>
# endif::basebackend-docbook[]
# ifndef::basebackend-docbook[]
# <a id="{target}"></a>
# <em>{kind? {kind}}{kind! Procedure} {var?{var}}{var!{target}}</em>
# <p><tt>({var?{var}}{var!{target}} <em>{args}</em>) {result? =&gt; <em>{result}</em>}</tt></p>
# endif::basebackend-docbook[]
# 
# [proctempl-inlinemacro]
# ifdef::basebackend-docbook[]
# <simpara><literal>({var?{var}}{var!{target}}{args@none:: <emphasis>{args}</emphasis>}{optarg? <emphasis>[{optarg}]</emphasis>}) {result? =&gt; <emphasis>{result}</emphasis>}</literal></simpara>
# endif::basebackend-docbook[]
# ifndef::basebackend-docbook[]
# <p><tt>({var?{var}}{var!{target}} <em>{args}</em>) {result? =&gt; <em>{result}</em>}</tt></p>
# endif::basebackend-docbook[]


[proc-inlinemacro]
<anchor id="{target}" xreflabel="{target}"></anchor>
<em>Procedure <var>{target}</var></em>
<br />
<code>({var?{var}}{var!{target}}{args@none:: <em>{args}</em>}{optarg? <em>[{optarg}]</em>}) {result? =&gt; <em>{result}</em>}</code>
<br />

[proctempl-inlinemacro]
<anchor id="{target}" xreflabel="{target}"></anchor>
<code>({var?{var}}{var!{target}}{args@none:: <em>{args}</em>}{optarg? <em>[{optarg}]</em>}) {result? =&gt; <em>{result}</em>}</code>
<br />
