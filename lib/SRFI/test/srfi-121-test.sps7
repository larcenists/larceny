;;; Copyright (C) Shiro Kawai, John Cowan, Thomas Gilray (2015).
;;; All Rights Reserved.
;;; 
;;; Permission is hereby granted, free of charge, to any person
;;; obtaining a copy of this software and associated documentation
;;; files (the "Software"), to deal in the Software without
;;; restriction, including without limitation the rights to use,
;;; copy, modify, merge, publish, distribute, sublicense, and/or
;;; sell copies of the Software, and to permit persons to whom the
;;; Software is furnished to do so, subject to the following
;;; conditions:
;;; 
;;; The above copyright notice and this permission notice shall be
;;; included in all copies or substantial portions of the Software.
;;; 
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
;;; OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;;; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
;;; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
;;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
;;; OTHER DEALINGS IN THE SOFTWARE.

(import (scheme base)
        (scheme cxr)
        (scheme read)
        (scheme write)
        (scheme file)
        (scheme process-context)
        (scheme inexact)
        (scheme complex)
        (rnrs conditions)
        (rnrs records syntactic)
        (only (srfi 1) unfold)
#;      (only (srfi 13) string-for-each)
        (srfi 116)
        (srfi 121))

#|
(use test)
(use generators)
(use (only srfi-1 unfold))
(use (only srfi-13 string-for-each))
|#

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Miscellaneous non-R7RS stuff used by the test programming
;;; without definitions.
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (with-input-from-string s thunk)
  (parameterize ((current-input-port (open-input-string s)))
   (thunk)))

;;; Uses "the Chicken test egg, which is provided on Chibi as
;;; the (chibi test) library."  So we have to fake that here.
;;;
;;; The Chicken test egg appears to be documented at
;;; http://wiki.call-cc.org/eggref/4/test

#|
(use test)
(use comparators)
(load "r7rs-shim.scm")
|#

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; This stuff was copied from test/R7RS/Lib/tests/scheme/test.sld
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Good enough for this file.

(define (for-all f xs . others)
  (cond ((null? xs)
	 #t)
	((apply f (car xs) (map car others))
	 (apply for-all f (cdr xs) (map cdr others)))
	(else
	 #f)))

(define (exists f xs . others)
  (cond ((null? xs)
	 #f)
	((apply f (car xs) (map car others))
	 #t)
	(else
	 (apply exists f (cdr xs) (map cdr others)))))

(define (get-string-n p n)
  (let loop ((chars '())
	     (i 0))
    (if (= i n)
	(list->string (reverse chars))
	(let ((c (read-char p)))
	  (if (char? c)
	      (loop (cons c chars)
		    (+ i 1))
	      (loop chars n))))))

(define-record-type err
  (make-err err-c)
  err?
  (err-c err-err-c))

(define-record-type expected-exception
  (make-expected-exception)
  expected-exception?)

(define-record-type multiple-results
  (make-multiple-results values)
  multiple-results?
  (values multiple-results-values))

(define-record-type approx
  (make-approx value)
  approx?
  (value approx-value))

(define-record-type alts (make-alts values) alts?
  (values alts-values))

(define-syntax larceny:test    ; FIXME: renamed
  (syntax-rules ()
    ((_ expr expected)
     (begin
       ;; (write 'expr) (newline)
       (run-test 'expr
		 (catch-exns (lambda () expr))
		 expected)))))

(define (catch-exns thunk)
  (guard (c (#t (make-err c)))
	 (call-with-values thunk
	   (lambda x
	     (if (= 1 (length x))
		 (car x)
		 (make-multiple-results x))))))

(define-syntax test/approx
  (syntax-rules ()
    ((_ expr expected)
     (run-test 'expr
	       (make-approx expr)
	       (make-approx expected)))))

(define-syntax test/alts
  (syntax-rules ()
    ((_ expr expected0 expected ...)
     (run-test 'expr
	       expr
	       (make-alts (list expected0 expected ...))))))

(define (good-enough? x y)
  ;; relative error should be with 0.1%, but greater
  ;; relative error is allowed when the expected value
  ;; is near zero.
  (cond ((not (number? x)) #f)
	((not (number? y)) #f)
	((or (not (real? x))
	     (not (real? y)))
	 (and (good-enough? (real-part x) (real-part y))
	      (good-enough? (imag-part x) (imag-part y))))
	((infinite? x)
	 (= x (* 2.0 y)))
	((infinite? y)
	 (= (* 2.0 x) y))
	((nan? y)
	 (nan? x))
	((> (magnitude y) 1e-6)
	 (< (/ (magnitude (- x y))
	       (magnitude y))
	    1e-3))
	(else
	 (< (magnitude (- x y)) 1e-6))))

;; FIXME

(define-syntax test/exn
  (syntax-rules ()
    ((_ expr condition)
     (test (guard (c (((condition-predicate
			(record-type-descriptor condition)) c)
		      (make-expected-exception)))
		  expr)
	   (make-expected-exception)))))

(define-syntax test/values
  (syntax-rules ()
    ((_ expr val ...)
     (run-test 'expr
	       (catch-exns (lambda () expr))
	       (make-multiple-results (list val ...))))))

(define-syntax test/output
  (syntax-rules ()
    ((_ expr expected str)
     (run-test 'expr
	       (capture-output
		(lambda ()
		  (run-test 'expr
			    (guard (c (#t (make-err c)))
				   expr)
			    expected)))
	       str))))

(define-syntax test/unspec
  (syntax-rules ()
    ((_ expr)
     (test (begin expr 'unspec) 'unspec))))

;; FIXME

(define-syntax test/unspec-or-exn
  (syntax-rules ()
    ((_ expr condition)
     (test (guard (c (((condition-predicate
			(record-type-descriptor condition)) c)
		      'unspec))
		  (begin expr 'unspec))
	   'unspec))))

;; FIXME

(define-syntax test/unspec-flonum-or-exn
  (syntax-rules ()
    ((_ expr condition)
     (test (guard (c (((condition-predicate
			(record-type-descriptor condition)) c)
		      'unspec-or-flonum))
		  (let ((v expr))
		    (if (flonum? v)
			'unspec-or-flonum
			(if (eq? v 'unspec-or-flonum)
			    (list v)
			    v))))
	   'unspec-or-flonum))))

(define-syntax test/output/unspec
  (syntax-rules ()
    ((_ expr str)
     (test/output (begin expr 'unspec) 'unspec str))))

(define checked 0)
(define failures '())

(define (capture-output thunk)
  (if (file-exists? "tmp-catch-out")
      (delete-file "tmp-catch-out"))
  (dynamic-wind
      (lambda () 'nothing)
      (lambda ()
        (with-output-to-file "tmp-catch-out"
	  thunk)
        (call-with-input-file "tmp-catch-out"
	  (lambda (p)
	    (get-string-n p 1024))))
      (lambda ()
        (if (file-exists? "tmp-catch-out")
            (delete-file "tmp-catch-out")))))

(define (same-result? got expected)
  (cond
   ((and (real? expected) (nan? expected))
    (and (real? got) (nan? got)))
   ((expected-exception? expected)
    (expected-exception? got))
   ((approx? expected)
    (and (approx? got)
	 (good-enough? (approx-value expected)
		       (approx-value got))))
   ((multiple-results? expected)
    (and (multiple-results? got)
	 (= (length (multiple-results-values expected))
	    (length (multiple-results-values got)))
	 (for-all same-result?
		  (multiple-results-values expected)
		  (multiple-results-values got))))
   ((alts? expected)
    (exists (lambda (e) (same-result? got e))
	    (alts-values expected)))
   (else
    ;(equal? got expected))))
    ((current-test-comparator)
     got expected))))

(define (run-test expr got expected)
  (set! checked (+ 1 checked))
  (unless (same-result? got expected)
	  (set! failures
		(cons (list expr got expected)
		      failures))))

(define (write-result prefix v)
  (cond
   ((multiple-results? v)
    (for-each (lambda (v)
		(write-result prefix v))
	      (multiple-results-values v)))
   ((approx? v)
    (display prefix)
    (display "approximately ")
    (write (approx-value v)))
   ((alts? v)
    (write-result (string-append prefix "   ")
		  (car (alts-values v)))
    (for-each (lambda (v)
		(write-result (string-append prefix "OR ")
			      v))
	      (cdr (alts-values v))))
   (else
    (display prefix)
    (write v))))

(define (report-test-results)
  (if (null? failures)
      (begin
	(display checked)
	(display " tests passed\n"))
      (begin
	(display (length failures))
	(display " tests failed:\n\n")
	(for-each (lambda (t)
		    (display "Expression:\n ")
		    (write (car t))
		    (display "\nResult:")
		    (write-result "\n " (cadr t))
		    (display "\nExpected:")
		    (write-result "\n " (caddr t))
		    (display "\n\n"))
		  (reverse failures))
	(display (length failures))
	(display " of ")
	(display checked)
	(display " tests failed.\n"))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; End of stuff copied from test/R7RS/Lib/tests/scheme/test.sld
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (iequal? x y)
  (cond ((and (ipair? x) (ipair? y))
         (and (iequal? (icar x) (icar y))
              (iequal? (icdr x) (icdr y))))
        ((and (pair? x) (pair? y))
         (and (iequal? (car x) (car y))
              (iequal? (cdr x) (cdr y))))
        ((and (vector? x)
              (vector? y))
         (iequal? (vector->list x) (vector->list y)))
        (else
         (equal? x y))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Definitions that fake part of the Chicken test egg.
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-syntax test-group
  (syntax-rules ()
   ((_ name expr)
    expr)
   ((_ name expr-or-defn stuff ...)
    (let ()
      expr-or-defn
      (test-group name stuff ...)))))

(define-syntax test
  (syntax-rules ()
   ((_ name expected actual)
    (begin
     ;; (write 'actual) (newline)
     (run-test '(begin name actual)
               (catch-exns (lambda () actual))
               expected)))
   ((_ expected actual)
    (test 'anonymous expected actual))))

(define-syntax test-assert
  (syntax-rules ()
   ((_ name expr)
    (parameterize ((current-test-comparator iequal?))
     (test name #t (and expr #t))))
   ((_ expr)
    (test-assert 'anonymous expr))))

(define-syntax test-deny
  (syntax-rules ()
   ((_ name expr)
    (parameterize ((current-test-comparator iequal?))
     (test name #t (and (not expr) #t))))
   ((_ expr)
    (test-deny 'anonymous expr))))

(define-syntax test-error
  (syntax-rules ()
   ((_ name expr)
    (test/exn expr &condition))
   ((_ expr)
    (test-error 'anonymous expr))))

(define-syntax test-end
  (syntax-rules ()
   ((_ name)
    (begin (report-test-results)
           (display "Done.")
           (newline)))
   ((_)
    (test-end 'anonymous))))

(define (test-exit . rest)
  (let ((error-status (if (null? rest) 1 (car rest))))
    (if (null? failures)
        (exit)
        (exit error-status))))        

(define current-test-comparator
  (make-parameter iequal?))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; End of definitions faking part of the Chicken test egg.
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(test-group "generators"
  (test-group "generators/constructors"
    (test '() (generator->list (generator)))
    (test '(1 2 3) (generator->list (generator 1 2 3)))
    (test '(8 9 10) (generator->list (make-iota-generator 3 8)))
    (test '(8 10 12) (generator->list (make-iota-generator 3 8 2)))
    (test '(3 4 5 6) (generator->list (make-range-generator 3) 4))
    (test '(3 4 5 6 7) (generator->list (make-range-generator 3 8)))
    (test '(3 5 7) (generator->list (make-range-generator 3 8 2)))
    (define g
      (make-coroutine-generator
       (lambda (yield) (let loop ((i 0))
                   (when (< i 3) (yield i) (loop (+ i 1)))))))
    (test '(0 1 2) (generator->list g))
    (test '(1 2 3 4 5) (generator->list (list->generator '(1 2 3 4 5))))
    (test '(1 2 3 4 5) (generator->list (vector->generator '#(1 2 3 4 5))))
    (test '(5 4 3 2 1) (generator->list (reverse-vector->generator '#(1 2 3 4 5))))
    (test '(#\a #\b #\c #\d #\e) (generator->list (string->generator "abcde")))
    (test '(10 20 30) (generator->list (bytevector->generator #u8(10 20 30))))
    (define (for-each-digit proc n)
      (when (> n 0)
        (let-values (((div rem) (truncate/ n 10)))
          (proc rem)
          (for-each-digit proc div))))
;    (test '(1 2 3 4 5) (generator-for-each for-each-digit 12345))
    (test '(0 2 4 6 8 10) (generator->list
                            (make-unfold-generator
                              (lambda (s) (> s 5))
                              (lambda (s) (* s 2))
                              (lambda (s) (+ s 1))
                              0)))
  ) ; end "generators/constructors"

  (test-group "generators/operators"
    (test '(a b 0 1) (generator->list (gcons* 'a 'b (make-range-generator 0 2))))
    (test '(0 1 2 0 1) (generator->list (gappend (make-range-generator 0 3)
                                                 (make-range-generator 0 2))))
    (test '() (generator->list (gappend)))
    (define g1 (generator 1 2 3))
    (define g2 (generator 4 5 6 7))
    (define (proc . args) (values (apply + args) (apply + args)))
    (test '(15 22 31) (generator->list (gcombine proc 10 g1 g2)))
    (test '(1 3 5 7 9) (generator->list (gfilter
                                           odd?
                                           (make-range-generator 1 11))))
    (test '(2 4 6 8 10) (generator->list (gremove
                                           odd?
                                           (make-range-generator 1 11))))
    (define g (make-range-generator 1 5))
    (test '(1 2 3) (generator->list (gtake g 3)))
    (test '(4) (generator->list g))
    (test '(1 2) (generator->list (gtake (make-range-generator 1 3) 3)))
    (test '(1 2 0) (generator->list (gtake (make-range-generator 1 3) 3 0)))
    (test '(3 4) (generator->list (gdrop (make-range-generator 1 5) 2)))
    (define g (make-range-generator 1 5))
    (define (small? x) (< x 3))
    (test '(1 2) (generator->list (gtake-while small? g)))
    (define g (make-range-generator 1 5))
    (test '(3 4) (generator->list (gdrop-while small? g)))
    (test '() (generator->list (gdrop-while (lambda args #t) (generator 1 2 3))))
    (test '(0.0 1.0 0 2) (generator->list (gdelete 1
                                                   (generator 0.0 1.0 0 1 2))))
    (test '(0.0 0 2) (generator->list (gdelete 1
                                               (generator 0.0 1.0 0 1 2)
                                               =)))
    (test '(a c e) (generator->list (gindex (list->generator '(a b c d e f))
                                            (list->generator '(0 2 4)))))
    (test '(a d e) (generator->list (gselect (list->generator '(a b c d e f))
                                             (list->generator '(#t #f #f #t #t #f)))))
    (test '(1 2 3) (generator->list (gdelete-neighbor-dups
                                      (generator 1 1 2 3 3 3)
                                      =)))
    #;(test '() (generator->list (gdelete-neighbor-dups
                                 (generator 1 2 3)
                                 (lambda args #t))))
  ) ; end "generators/operators"

  (test-group "generators/consumers"
    ;; no test for plain generator->list (used throughout)
    (test '(1 2 3) (generator->list (generator 1 2 3 4 5) 3))
    (test '(5 4 3 2 1) (generator->reverse-list (generator 1 2 3 4 5)))
    (test '#(1 2 3 4 5) (generator->vector (generator 1 2 3 4 5)))
    (test '#(1 2 3) (generator->vector (generator 1 2 3 4 5) 3))
    (test "abc" (generator->string (generator #\a #\b #\c)))
    (test '(e d c b a . z) (with-input-from-string "a b c d e"
                             (lambda () (generator-fold cons 'z read))))

    (define n 0)
    (generator-for-each (lambda values (set! n (apply + values)))
      (generator 1) (generator 2) (generator 3))
    (test 6 n)
    (test 3 (generator-find (lambda (x) (> x 2)) (make-range-generator 1 5)))
    (test 2 (generator-count odd? (make-range-generator 1 5)))
    (define g (make-range-generator 2 5))
    (test #t (generator-any odd? g))
    (test '(4) (generator->list g))
    (define g (make-range-generator 2 5))
    (test #f (generator-every odd? g))
    (test '(3 4) (generator->list g))
    (test '(#\a #\b #\c) (generator-unfold (make-for-each-generator string-for-each "abc") unfold))

  ) ; end "generators/consumers"

) ; end "generators"

(test-end)

(test-exit)
