;;; Copyright (C) John Cowan (2015). All Rights Reserved.
;;; 
;;; Permission is hereby granted, free of charge, to any person
;;; obtaining a copy of this software and associated documentation
;;; files (the "Software"), to deal in the Software without
;;; restriction, including without limitation the rights to use,
;;; copy, modify, merge, publish, distribute, sublicense, and/or
;;; sell copies of the Software, and to permit persons to whom the
;;; Software is furnished to do so, subject to the following
;;; conditions:
;;; 
;;; The above copyright notice and this permission notice shall be
;;; included in all copies or substantial portions of the Software.
;;; 
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
;;; OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;;; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
;;; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
;;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
;;; OTHER DEALINGS IN THE SOFTWARE. 

(import (scheme base)
        (scheme cxr)
        (scheme write)
        (scheme file)
        (scheme process-context)
        (scheme inexact)
        (scheme complex)
        (rnrs conditions)
        (rnrs records syntactic)
        (srfi 116)
        (srfi 127))

;;; Uses "the Chicken test egg, which is provided on Chibi as
;;; the (chibi test) library."  So we have to fake that here.
;;;
;;; The Chicken test egg appears to be documented at
;;; http://wiki.call-cc.org/eggref/4/test

#|
(use test)
(use lseqs)
(include "r7rs-shim.scm")
|#

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; This stuff was copied from test/R7RS/Lib/tests/scheme/test.sld
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Good enough for this file.

(define (for-all f xs . others)
  (cond ((null? xs)
	 #t)
	((apply f (car xs) (map car others))
	 (apply for-all f (cdr xs) (map cdr others)))
	(else
	 #f)))

(define (exists f xs . others)
  (cond ((null? xs)
	 #f)
	((apply f (car xs) (map car others))
	 #t)
	(else
	 (apply exists f (cdr xs) (map cdr others)))))

(define (get-string-n p n)
  (let loop ((chars '())
	     (i 0))
    (if (= i n)
	(list->string (reverse chars))
	(let ((c (read-char p)))
	  (if (char? c)
	      (loop (cons c chars)
		    (+ i 1))
	      (loop chars n))))))

(define-record-type err
  (make-err err-c)
  err?
  (err-c err-err-c))

(define-record-type expected-exception
  (make-expected-exception)
  expected-exception?)

(define-record-type multiple-results
  (make-multiple-results values)
  multiple-results?
  (values multiple-results-values))

(define-record-type approx
  (make-approx value)
  approx?
  (value approx-value))

(define-record-type alts (make-alts values) alts?
  (values alts-values))

(define-syntax larceny:test    ; FIXME: renamed
  (syntax-rules ()
    ((_ expr expected)
     (begin
       ;; (write 'expr) (newline)
       (run-test 'expr
		 (catch-exns (lambda () expr))
		 expected)))))

(define (catch-exns thunk)
  (guard (c (#t (make-err c)))
	 (call-with-values thunk
	   (lambda x
	     (if (= 1 (length x))
		 (car x)
		 (make-multiple-results x))))))

(define-syntax test/approx
  (syntax-rules ()
    ((_ expr expected)
     (run-test 'expr
	       (make-approx expr)
	       (make-approx expected)))))

(define-syntax test/alts
  (syntax-rules ()
    ((_ expr expected0 expected ...)
     (run-test 'expr
	       expr
	       (make-alts (list expected0 expected ...))))))

(define (good-enough? x y)
  ;; relative error should be with 0.1%, but greater
  ;; relative error is allowed when the expected value
  ;; is near zero.
  (cond ((not (number? x)) #f)
	((not (number? y)) #f)
	((or (not (real? x))
	     (not (real? y)))
	 (and (good-enough? (real-part x) (real-part y))
	      (good-enough? (imag-part x) (imag-part y))))
	((infinite? x)
	 (= x (* 2.0 y)))
	((infinite? y)
	 (= (* 2.0 x) y))
	((nan? y)
	 (nan? x))
	((> (magnitude y) 1e-6)
	 (< (/ (magnitude (- x y))
	       (magnitude y))
	    1e-3))
	(else
	 (< (magnitude (- x y)) 1e-6))))

;; FIXME

(define-syntax test/exn
  (syntax-rules ()
    ((_ expr condition)
     (test (guard (c (((condition-predicate
			(record-type-descriptor condition)) c)
		      (make-expected-exception)))
		  expr)
	   (make-expected-exception)))))

(define-syntax test/values
  (syntax-rules ()
    ((_ expr val ...)
     (run-test 'expr
	       (catch-exns (lambda () expr))
	       (make-multiple-results (list val ...))))))

(define-syntax test/output
  (syntax-rules ()
    ((_ expr expected str)
     (run-test 'expr
	       (capture-output
		(lambda ()
		  (run-test 'expr
			    (guard (c (#t (make-err c)))
				   expr)
			    expected)))
	       str))))

(define-syntax test/unspec
  (syntax-rules ()
    ((_ expr)
     (test (begin expr 'unspec) 'unspec))))

;; FIXME

(define-syntax test/unspec-or-exn
  (syntax-rules ()
    ((_ expr condition)
     (test (guard (c (((condition-predicate
			(record-type-descriptor condition)) c)
		      'unspec))
		  (begin expr 'unspec))
	   'unspec))))

;; FIXME

(define-syntax test/unspec-flonum-or-exn
  (syntax-rules ()
    ((_ expr condition)
     (test (guard (c (((condition-predicate
			(record-type-descriptor condition)) c)
		      'unspec-or-flonum))
		  (let ((v expr))
		    (if (flonum? v)
			'unspec-or-flonum
			(if (eq? v 'unspec-or-flonum)
			    (list v)
			    v))))
	   'unspec-or-flonum))))

(define-syntax test/output/unspec
  (syntax-rules ()
    ((_ expr str)
     (test/output (begin expr 'unspec) 'unspec str))))

(define checked 0)
(define failures '())

(define (capture-output thunk)
  (if (file-exists? "tmp-catch-out")
      (delete-file "tmp-catch-out"))
  (dynamic-wind
      (lambda () 'nothing)
      (lambda ()
        (with-output-to-file "tmp-catch-out"
	  thunk)
        (call-with-input-file "tmp-catch-out"
	  (lambda (p)
	    (get-string-n p 1024))))
      (lambda ()
        (if (file-exists? "tmp-catch-out")
            (delete-file "tmp-catch-out")))))

(define (same-result? got expected)
  (cond
   ((and (real? expected) (nan? expected))
    (and (real? got) (nan? got)))
   ((expected-exception? expected)
    (expected-exception? got))
   ((approx? expected)
    (and (approx? got)
	 (good-enough? (approx-value expected)
		       (approx-value got))))
   ((multiple-results? expected)
    (and (multiple-results? got)
	 (= (length (multiple-results-values expected))
	    (length (multiple-results-values got)))
	 (for-all same-result?
		  (multiple-results-values expected)
		  (multiple-results-values got))))
   ((alts? expected)
    (exists (lambda (e) (same-result? got e))
	    (alts-values expected)))
   (else
    ;(equal? got expected))))
    ((current-test-comparator)
     got expected))))

(define (run-test expr got expected)
  (set! checked (+ 1 checked))
  (unless (same-result? got expected)
	  (set! failures
		(cons (list expr got expected)
		      failures))))

(define (write-result prefix v)
  (cond
   ((multiple-results? v)
    (for-each (lambda (v)
		(write-result prefix v))
	      (multiple-results-values v)))
   ((approx? v)
    (display prefix)
    (display "approximately ")
    (write (approx-value v)))
   ((alts? v)
    (write-result (string-append prefix "   ")
		  (car (alts-values v)))
    (for-each (lambda (v)
		(write-result (string-append prefix "OR ")
			      v))
	      (cdr (alts-values v))))
   (else
    (display prefix)
    (write v))))

(define (report-test-results)
  (if (null? failures)
      (begin
	(display checked)
	(display " tests passed\n"))
      (begin
	(display (length failures))
	(display " tests failed:\n\n")
	(for-each (lambda (t)
		    (display "Expression:\n ")
		    (write (car t))
		    (display "\nResult:")
		    (write-result "\n " (cadr t))
		    (display "\nExpected:")
		    (write-result "\n " (caddr t))
		    (display "\n\n"))
		  (reverse failures))
	(display (length failures))
	(display " of ")
	(display checked)
	(display " tests failed.\n"))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; End of stuff copied from test/R7RS/Lib/tests/scheme/test.sld
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (iequal? x y)
  (cond ((and (ipair? x) (ipair? y))
         (and (iequal? (icar x) (icar y))
              (iequal? (icdr x) (icdr y))))
        ((and (pair? x) (pair? y))
         (and (iequal? (car x) (car y))
              (iequal? (cdr x) (cdr y))))
        ((and (vector? x)
              (vector? y))
         (iequal? (vector->list x) (vector->list y)))
        (else
         (equal? x y))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Definitions that fake part of the Chicken test egg.
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-syntax test-group
  (syntax-rules ()
   ((_ name expr)
    expr)
   ((_ name expr-or-defn stuff ...)
    (let ()
      expr-or-defn
      (test-group name stuff ...)))))

(define-syntax test
  (syntax-rules ()
   ((_ name expected actual)
    (begin
     ;; (write 'actual) (newline)
     (run-test '(begin name actual)
               (catch-exns (lambda () actual))
               expected)))
   ((_ expected actual)
    (test 'anonymous expected actual))))

(define-syntax test-assert
  (syntax-rules ()
   ((_ name expr)
    (parameterize ((current-test-comparator iequal?))
     (test name #t (and expr #t))))
   ((_ expr)
    (test-assert 'anonymous expr))))

(define-syntax test-deny
  (syntax-rules ()
   ((_ name expr)
    (parameterize ((current-test-comparator iequal?))
     (test name #t (and (not expr) #t))))
   ((_ expr)
    (test-deny 'anonymous expr))))

(define-syntax test-error
  (syntax-rules ()
   ((_ name expr)
    (test/exn expr &condition))
   ((_ expr)
    (test-error 'anonymous expr))))

(define-syntax test-end
  (syntax-rules ()
   ((_ name)
    (begin (report-test-results)
           (display "Done.")
           (newline)))
   ((_)
    (test-end 'anonymous))))

(define (test-exit . rest)
  (let ((error-status (if (null? rest) 1 (car rest))))
    (if (null? failures)
        (exit)
        (exit error-status))))        

(define current-test-comparator
  (make-parameter iequal?))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; End of definitions faking part of the Chicken test egg.
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Make-generator for tests cloned from SRFI 121
(define (make-generator . args)
        (lambda () (if (null? args)
                       (eof-object)
                       (let ((next (car args)))
                            (set! args (cdr args))
                            next))))

;; Make-lseq creates an lseq, like list, but guarantees the use of a generator
(define (make-lseq . args) (generator->lseq (apply make-generator args)))



(test-group "lseqs"
  (test-group "lseqs/constructor"
    (define one23 (make-lseq 1 2 3))
    (test 1 (car one23))
    (test-assert (procedure? (cdr one23)))
    (test '(1 2 3) (lseq-realize one23))
  ) ; end lseqs/constructor

  (test-group "lseqs/predicates"
    (test-assert (lseq? '()))
    (test-assert (lseq? '(1 2 3)))
    (test-assert (lseq? (make-lseq 1 2 3)))
    (test-assert (lseq? (cons 'x (lambda () 'x))))

    (test-assert (lseq=? = '() '()))
    (test-assert (lseq=? = '(1 2 3) '(1 2 3)))
    (test-assert (lseq=? = (make-lseq 1 2 3)
                           (make-lseq 1 2 3)))
    (test-assert (lseq=? = (make-lseq 1 2 3) '(1 2 3)))
  ) ; end lseqs/predicates

  (test-group "lseqs/selectors"
    (test-error (lseq-car (make-generator)))
    (test 1 (lseq-car (make-lseq 1 2 3)))
    (test 1 (lseq-car '(1 2 3)))
    (test-error (lseq-car 2))

    (test-error (lseq-first (make-generator)))
    (test 1 (lseq-first (make-lseq 1 2 3)))
    (test 1 (lseq-first '(1 2 3)))
    (test-error (lseq-first 2))

    (test-error (lseq-cdr (make-generator)))
    (test 2 (lseq-cdr '(1 . 2)))
    (test 2 (lseq-car (lseq-cdr '(1 2 3))))
    (test 2 (lseq-car (lseq-cdr (make-lseq 1 2 3))))

    (test-error (lseq-rest (make-generator)))
    (test 2 (lseq-rest '(1 . 2)))
    (test 2 (lseq-car (lseq-rest '(1 2 3))))
    (test 2 (lseq-car (lseq-rest (make-lseq 1 2 3))))
    (test-error (lseq-rest 2))

    (test-error (lseq-ref '() 0))
    (test 1 (lseq-ref '(1) 0))
    (test 2 (lseq-ref '(1 2) 1))
    (test-error (lseq-ref (make-lseq) 0))
    (test 1 (lseq-ref (make-lseq 1) 0))
    (test 1 (lseq-ref (make-lseq 1 2) 0))
    (test 2 (lseq-ref (make-lseq 1 2) 1))

    (test-error (lseq-take '() 1))
    (test-error (lseq-take (make-lseq) 1))
    (test-assert (procedure? (cdr (lseq-take '(1 2 3 4 5) 3)))) ; test laziness
    (test '(1 2 3) (lseq-realize (lseq-take '(1 2 3 4 5) 3)))

    (test-error (lseq-drop '() 1))
    (test-error (lseq-drop (make-lseq 1) 2))
    (test '(3 4 5) (lseq-realize (lseq-drop '(1 2 3 4 5) 2)))
    (test '(3 4 5) (lseq-realize (lseq-drop (make-lseq 1 2 3 4 5) 2)))
  ) ; end lseqs/selectors

  (test-group "lseqs/whole"
    (test '() (lseq-realize '()))
    (test '(1 2 3) (lseq-realize '(1 2 3)))
    (test '() (lseq-realize (make-lseq)))
    (test '(1 2 3) (lseq-realize (make-lseq 1 2 3)))

    (define g (lseq->generator '(1 2 3)))
    (begin
      (test 1 (g))
      (test 2 (g))
      (test 3 (g))
      (test-assert (eof-object? (g))))
    (define g (lseq->generator (make-lseq 1 2 3)))
    (begin
      (test 1 (g))
      (test 2 (g))
      (test 3 (g))
      (test-assert (eof-object? (g))))

    (test 0 (lseq-length '()))
    (test 3 (lseq-length '(1 2 3)))
    (test 3 (lseq-length (make-lseq 1 2 3)))

    (test '(1 2 3 a b c) (lseq-realize (lseq-append '(1 2 3) '(a b c))))
    (define one23abc (lseq-append (make-lseq 1 2 3) (make-lseq 'a 'b 'c)))
    (test-assert (procedure? (cdr one23abc)))
    (test-assert (lseq-realize one23abc))

    (define one2345 (make-lseq 1 2 3 4 5))
    (define oddeven (make-lseq 'odd 'even 'odd 'even 'odd 'even 'odd 'even))
    (test '((one 1 odd) (two 2 even) (three 3 odd))
          (lseq-realize (lseq-zip '(one two three) one2345 oddeven)))
  ) ; end lseqs/whole

  (test-group "lseqs/mapping"
    (test '() (lseq-map - '()))
    (test '(-1 -2 -3) (lseq-realize (lseq-map - '(1 2 3))))
    (test '(-1 -2 -3) (lseq-realize (lseq-map - (make-lseq 1 2 3))))
    (test-assert (procedure? (cdr (lseq-map - '(1 2 3)))))

    (define output '())
    (define out! (lambda (x) (set! output (cons x output))))
    (lseq-for-each out! '())
    (test output '())
    (lseq-for-each out! '(a b c))
    (test output '(c b a))
    (lseq-for-each out! (make-lseq 1 2 3))
    (test output '(3 2 1 c b a))

    (test '() (lseq-filter odd? '()))
    (define odds (lseq-filter odd? '(1 2 3 4 5)))
    (test-assert (procedure? (cdr odds)))
    (test '(1 3 5) (lseq-realize odds))
    (test '(1 3 5) (lseq-realize (lseq-filter odd? (make-lseq 1 2 3 4 5))))

    (test '() (lseq-remove even? '()))
    (define odds (lseq-remove even? '(1 2 3 4 5)))
    (test-assert (procedure? (cdr odds)))
    (test '(1 3 5) (lseq-realize odds))
    (test '(1 3 5) (lseq-realize (lseq-remove even? (make-lseq 1 2 3 4 5))))

  ) ; end lseqs/mapping

  (test-group "lseqs/searching"
    (test 4 (lseq-find even? '(3 1 4 1 5 9 2 6)))
    (test 4 (lseq-find even? (make-lseq 3 1 4 1 5 9 2 6)))
    (test #f (lseq-find negative? (make-lseq 1 2 3 4 5)))

    (test '(-8 -5 0 0) (lseq-realize (lseq-find-tail even? '(3 1 37 -8 -5 0 0))))
    (test '(-8 -5 0 0) (lseq-realize (lseq-find-tail even?
                                                     (make-lseq 3 1 37 -8 -5 0 0))))
    (test #f (lseq-find-tail even? '()))
    (test #f (lseq-find-tail negative? (make-lseq 1 2 3 4 5)))

    (test '(2 18) (lseq-realize (lseq-take-while even? '(2 18 3 10 22 9))))
    (test '(2 18) (lseq-realize (lseq-take-while even?
                                                 (make-lseq 2 18 3 10 22 9))))
    (test '(2 18) (lseq-realize (lseq-take-while even?
                                                 (make-lseq 2 18 3 10 22 9))))

    (test '(3 10 22 9) (lseq-drop-while even? '(2 18 3 10 22 9)))
    (test '(3 10 22 9) (lseq-realize (lseq-drop-while even?
                                       (make-lseq 2 18 3 10 22 9))))

    (test #t (lseq-any integer? '(a 3 b 2.7)))
    (test #t (lseq-any integer? (make-lseq 'a 3 'b 2.7)))
    (test #f (lseq-any integer? '(a 3.1 b 2.7)))
    (test #f (lseq-any integer? (make-lseq 'a 3.1 'b 2.7)))
    (test #t (lseq-any < '(3 1 4 1 5) '(2 7 1 8 2)))
    (define (factorial n)
      (cond
        ((< n 0) #f)
        ((= n 0) 1)
        (else (* n (factorial (- n 1))))))
    (test 6 (lseq-any factorial '(-1 -2 3 4)))
    (test 6 (lseq-any factorial (make-lseq -1 -2 3 4)))

    (test 24 (lseq-every factorial '(1 2 3 4)))
    (test 24 (lseq-every factorial (make-lseq 1 2 3 4)))

    (test 2 (lseq-index even? '(3 1 4 1 5 9)))
    (test 1 (lseq-index < '(3 1 4 1 5 9 2 5 6) '(2 7 1 8 2)))
    (test #f (lseq-index = '(3 1 4 1 5 9 2 5 6) '(2 7 1 8 2)))

    (test '(a b c) (lseq-realize (lseq-memq 'a '(a b c))))
    (test '(a b c) (lseq-realize (lseq-memq 'a (make-lseq 'a 'b 'c))))
    (test #f (lseq-memq 'a (make-lseq 'b 'c 'd)))
    (test #f (lseq-memq (list 'a) '(b c d)))
    (test #f (lseq-memq (list 'a) (make-lseq 'b 'c 'd)))

    (test '(101 102) (lseq-realize (lseq-memv 101 (make-lseq 100 101 102))))

    (test '((a) c) (lseq-realize (lseq-member (list 'a) (make-lseq 'b '(a) 'c))))
    (test '(2 3) (lseq-realize (lseq-member 2.0 (make-lseq 1 2 3) =)))
  ) ; end lseqs/searching

) ; end lseqs

(test-end)

(test-exit)
