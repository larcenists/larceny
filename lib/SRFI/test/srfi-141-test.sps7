;;; Copyright (C) William D Clinger (2017).
;;; 
;;; Permission is hereby granted, free of charge, to any person
;;; obtaining a copy of this software and associated documentation
;;; files (the "Software"), to deal in the Software without
;;; restriction, including without limitation the rights to use,
;;; copy, modify, merge, publish, distribute, sublicense, and/or
;;; sell copies of the Software, and to permit persons to whom the
;;; Software is furnished to do so, subject to the following
;;; conditions:
;;; 
;;; The above copyright notice and this permission notice shall be
;;; included in all copies or substantial portions of the Software.
;;; 
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
;;; OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;;; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
;;; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
;;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
;;; OTHER DEALINGS IN THE SOFTWARE. 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Tests for integer division.

(import (scheme base)
        (scheme write)
        (srfi 141))

(define (writeln . xs)
  (for-each display xs)
  (newline))

(define (fail token . more)
  (newline)
  (writeln "Error: test failed: " token)
  (display " ")
  (write current-test)
  (newline)
  #f)

;;; To display tests that fail, change "(or " to "(OR ".
;;; To display tests before they are run, uncomment the write below.

(define current-test #f)

(define-syntax OR
  (syntax-rules ()
    ((_ expr1 expr ...)
     (begin (set! current-test 'expr1)
            ;; (write current-test)
            ;; (newline)
            (or expr1 expr ...)))))

;;; Help macros for testing.

(define-syntax test-family
  (syntax-rules ()
    ((_ / div mod ?a ?b ?q ?r)
     (let ((a ?a) (b ?b) (q ?q) (r ?r))
       (call-with-values
        (lambda () (/ a b))
        (lambda (qq rr)
          (or (and (eqv? qq q) (eqv? rr r))
              (fail (list '/ a b 'actual: qq rr 'expected: q r)))))
       (or (eqv? (div a b) q)
           (fail (list 'div a b 'actual: (div a b) 'expected: q)))
       (or (eqv? (mod a b) r)
           (fail (list 'mod a b 'actual: (mod a b) 'expected: r)))))))

(define-syntax test-all
  (syntax-rules ()
    ((_ ?a ?b (?q1 ?q2 ?q3 ?q4 ?q5 ?q6) (?r1 ?r2 ?r3 ?r4 ?r5 ?r6))
     (let ((a ?a)
           (b ?b)
           (q1 ?q1)
           (q2 ?q2)
           (q3 ?q3)
           (q4 ?q4)
           (q5 ?q5)
           (q6 ?q6)
           (r1 ?r1)
           (r2 ?r2)
           (r3 ?r3)
           (r4 ?r4)
           (r5 ?r5)
           (r6 ?r6))

       (test-family floor/ floor-quotient floor-remainder
                    a b q1 r1)
       (test-family ceiling/ ceiling-quotient ceiling-remainder
                    a b q2 r2)
       (test-family truncate/ truncate-quotient truncate-remainder
                    a b q3 r3)
       (test-family round/ round-quotient round-remainder
                    a b q4 r4)
       (test-family euclidean/ euclidean-quotient euclidean-remainder
                    a b q5 r5)
       (test-family balanced/ balanced-quotient balanced-remainder
                    a b q6 r6)))))

(define-syntax test-inexact
  (syntax-rules ()
    ((_ ?a ?b (?q1 ?q2 ?q3 ?q4 ?q5 ?q6) (?r1 ?r2 ?r3 ?r4 ?r5 ?r6))
     (let ((a ?a)
           (b ?b)
           (q1 (inexact ?q1))
           (q2 (inexact ?q2))
           (q3 (inexact ?q3))
           (q4 (inexact ?q4))
           (q5 (inexact ?q5))
           (q6 (inexact ?q6))
           (r1 (inexact ?r1))
           (r2 (inexact ?r2))
           (r3 (inexact ?r3))
           (r4 (inexact ?r4))
           (r5 (inexact ?r5))
           (r6 (inexact ?r6)))
       (test-all a b (q1 q2 q3 q4 q5 q6) (r1 r2 r3 r4 r5 r6))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(test-all 0 1 (0 0 0 0 0 0) (0 0 0 0 0 0))

(test-all 0 -1 (0 0 0 0 0 0) (0 0 0 0 0 0))

(test-all 1 1 (1 1 1 1 1 1) (0 0 0 0 0 0))

(test-all 1 -1 (-1 -1 -1 -1 -1 -1) (0 0 0 0 0 0))

(test-all -1 -1 (1 1 1 1 1 1) (0 0 0 0 0 0))

(test-all 1 -1 (-1 -1 -1 -1 -1 -1) (0 0 0 0 0 0))

(test-all 8 2 (4 4 4 4 4 4) (0 0 0 0 0 0))

(test-all 8 -2 (-4 -4 -4 -4 -4 -4) (0 0 0 0 0 0))

(test-all -8 -2 (4 4 4 4 4 4) (0 0 0 0 0 0))

(test-all -8 2 (-4 -4 -4 -4 -4 -4) (0 0 0 0 0 0))

(test-all 9 2 (4 5 4 4 4 5) (1 -1 1 1 1 -1))

(test-all 9 -2 (-5 -4 -4 -4 -4 -5) (-1 1 1 1 1 -1))

(test-all -9 -2 (4 5 4 4 5 4) (-1 +1 -1 -1 +1 -1))

(test-all -9 2 (-5 -4 -4 -4 -5 -4) (+1 -1 -1 -1 +1 -1))

(test-all 11 2 (5 6 5 6 5 6) (1 -1 1 -1 1 -1))

(test-all 11 -2 (-6 -5 -5 -6 -5 -6) (-1 1 1 -1 1 -1))

(test-all -11 -2 (5 6 5 6 6 5) (-1 +1 -1 +1 +1 -1))

(test-all -11 2 (-6 -5 -5 -6 -6 -5) (+1 -1 -1 +1 +1 -1))

(test-all 21 4 (5 6 5 5 5 5) (1 -3 1 1 1 1))

(test-all 21 -4 (-6 -5 -5 -5 -5 -5) (-3 1 1 1 1 1))

(test-all -21 -4 (5 6 5 5 6 5) (-1 +3 -1 -1 +3 -1))

(test-all -21 4 (-6 -5 -5 -5 -6 -5) (+3 -1 -1 -1 +3 -1))

(test-all 23 4 (5 6 5 6 5 6) (3 -1 3 -1 3 -1))

(test-all 23 -4 (-6 -5 -5 -6 -5 -6) (-1 3 3 -1 3 -1))

(test-all -23 -4 (5 6 5 6 6 6) (-3 +1 -3 +1 +1 +1))

(test-all -23 4 (-6 -5 -5 -6 -6 -6) (+1 -3 -3 +1 +1 +1))


(test-inexact 23.0 4 (5 6 5 6 5 6) (3 -1 3 -1 3 -1))

(test-inexact 23.0 -4 (-6 -5 -5 -6 -5 -6) (-1 3 3 -1 3 -1))

(test-inexact -23.0 -4 (5 6 5 6 6 6) (-3 +1 -3 +1 +1 +1))

(test-inexact -23.0 4 (-6 -5 -5 -6 -6 -6) (+1 -3 -3 +1 +1 +1))


(test-inexact 23 4.0 (5 6 5 6 5 6) (3 -1 3 -1 3 -1))

(test-inexact 23 -4.0 (-6 -5 -5 -6 -5 -6) (-1 3 3 -1 3 -1))

(test-inexact -23 -4.0 (5 6 5 6 6 6) (-3 +1 -3 +1 +1 +1))

(test-inexact -23 4.0 (-6 -5 -5 -6 -6 -6) (+1 -3 -3 +1 +1 +1))


(test-inexact 23.0 4.0 (5 6 5 6 5 6) (3 -1 3 -1 3 -1))

(test-inexact 23.0 -4.0 (-6 -5 -5 -6 -5 -6) (-1 3 3 -1 3 -1))

(test-inexact -23.0 -4.0 (5 6 5 6 6 6) (-3 +1 -3 +1 +1 +1))

(test-inexact -23.0 4.0 (-6 -5 -5 -6 -6 -6) (+1 -3 -3 +1 +1 +1))


(writeln "Done.")
