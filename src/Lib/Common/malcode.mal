; Copyright Lightship Software, Incorporated.    -*- scheme -*-
; vim: ft=scheme :
;
; $Id$
;
; MAL code that supports Larceny's standard libraries

; @raw-apply@
;
; The raw apply procedure has to be written in mal
; (MacScheme assembly language) because the compiler
; never emits an apply instruction.

`((,$lambda ((,$.proc)
             (,$args= 3)
             (,$reg 1)
             (,$apply 2 3)
             (,$.label 1001)
             (,$branch 1001))  ; just a precaution
            0
            #(#f #f 3 #f #f #f))
  (,$setglbl @raw-apply@)
  (,$const @raw-apply@)
  (,$return))


; values
;
; The number of return values is passed in register 0,
; unless a single value is being returned, in which case
; register 0 holds the procedure that is returning 0 values.
; The first return value is returned in the result register,
; and the remaining values in registers 2 through whatever.
; When 0 values are returned, the unspecified value is passed
; in the result register so a normal continuation will think
; a single unspecified value is being returned.
;
; Nothing should depend on the first register being duplicated
; in register 1, even though this code happens to do that.
;
; Handles the 0-argument case specially.
; Otherwise it just puts the argument count into register 0,
; puts the first return value into the return register, and
; returns normally.
;
; Once the number of values being returned has been stored
; into register 0:
;
;     no instruction may refer to any variable
;     no instruction may refer to any non-immediate constant
;     no instruction may allocate storage
;     no instruction may fault

`((,$lambda ((,$.proc)
             (,$setreg 0)      ; argument count now in reg0
             (,$reg 0)
             (,$op2imm eq? 0)
             (,$branchf 1001)
             (,$op1 unspecified)
             (,$setreg 1)
             (,$reg 1)
             (,$return)
             (,$.label 1001)   ; at least one argument
             (,$reg 1)
             (,$return))
            0
            #(#f #f 0.0 #f #f #f))
  (,$setglbl values)
  (,$const values)
  (,$return))

; call-with-values
;
; Bummed to avoid using apply when fewer than 5 values are returned.

`((,$lambda ((,$.proc)
             (,$args= 2)
             (,$save 2)
             (,$store 0 0)
             (,$store 2 2)     ; stack slot 2 = receiver
             (,$reg 1)
             (,$setrtn 1000)
             (,$invoke 0)
             (,$.align 4)
             (,$.label 1000)
             (,$.cont)
             (,$movereg 0 1)   ; argument count
             (,$load 0 0)
             (,$setstk 1)      ; stack slot 1 = first return value
             (,$reg 1)
             (,$op1 fixnum?)
             (,$branchf 1001)
             (,$reg 1)         ; argument count
             (,$op2imm <:fix:fix 5)
             (,$branchf 1005)
             (,$reg 1)
             (,$op2imm <:fix:fix 2)
             (,$branchf 1002)
             (,$reg 1)
             (,$op2imm <:fix:fix 1)
             (,$branchf 1001)
             (,$stack 2)
             (,$pop 2)
             (,$invoke 0)      ; no return values
             (,$.label 1001)
             (,$load 1 1)
             (,$stack 2)
             (,$pop 2)
             (,$invoke 1)      ; 1 return value
             (,$.label 1002)
             (,$reg 1)
             (,$op2imm <:fix:fix 3)
             (,$branchf 1003)
             (,$load 1 1)
             (,$stack 2)
             (,$pop 2)
             (,$invoke 2)      ; 2 return values
             (,$.label 1003)
             (,$reg 1)
             (,$op2imm <:fix:fix 4)
             (,$branchf 1004)
             (,$load 1 1)
             (,$stack 2)
             (,$pop 2)
             (,$invoke 3)      ; 3 return values
             (,$.label 1004)
             (,$load 1 1)
             (,$stack 2)
             (,$pop 2)
             (,$invoke 4)      ; 4 return values
             (,$.label 1005)   ; 5 or more return values
             (,$reg 1)
             (,$load 1 1)
             (,$args>= 0)
             (,$movereg 1 2)
             (,$load 1 2)
             (,$global apply)
             (,$pop 2)
             (,$invoke 2))
            0
            #(#f #f 2 #f #f #f))
  (,$setglbl call-with-values)
  (,$const call-with-values)
  (,$return))

; trampoline-template
;
; An environment-less procedure that accepts any number of arguments 
; and invokes a procedure stored in its constant vector with those 
; arguments.  
;
; The constant vector of the procedure contains a symbol DUMMY as a 
; placeholder for the procedure.  TRAMPOLINE-TEMPLATE must always be 
; deep-copied before being patched an used.
;
; It is not possible to create a procedure with a shorter procedure 
; structure than that of a trampoline.  That fact may be relied on: 
; a trampoline can be patched into any other procedure.
;
; (Even in MAL this procedure is painful because argument counts are
; hardcoded in the INVOKE instruction.  Thus we must use rest args
; and APPLY.  We can do much better than this by extending the 
; instruction set a little, and if performance matters, then we should
; do that.  For the time being, this procedure is used only for debugging
; and performance is unimportant.)

`((,$lambda ((,$args>= 0)
             (,$movereg 1 2)
             (,$const dummy)
             (,$setreg 1)
             (,$global apply)
             (,$invoke 2))
            0
            #(#f #f 0.0 #f #f #f))
  (,$setglbl trampoline-template)
  (,$const trampoline-template)
  (,$return))


; call-with-current-continuation
;
; Call-with-current-continuation has to be written in mal to 
; make sure that the compiler does not mess with the stack frames;
; the creg/creg-set! primitives need predictable stack behavior.

`((,$lambda ((,$.proc)
             (,$args=   1)
             (,$op1     creg)
             (,$setreg  2)

             ;; Added for continuation-mark support
             (,$global *cms*)
             (,$setreg 3)

             (,$lambda  ((,$.proc)
                         (,$args>=  0)
                         (,$movereg 1 2)

                         ;; Added for continuation-mark support
                         (,$lexical 0 3)
                         (,$setglbl *cms*)

                         (,$global  values)
                         (,$setreg  1)
                         (,$lexical 0 2)
                         (,$op1     creg-set!)
                         (,$global  apply)
                         (,$invoke  2))        ; (apply values args)
                        3 ;; changed from 2 for continuation-marks
                        #(#f #f 0.0 #f #f #f))
             (,$setreg  3)
             (,$reg     1)
             (,$movereg 3 1)
             (,$invoke  1))
            0
            #(#f #f 1 #f #f #f))
  (,$setglbl call-with-current-continuation)
  (,$const   call-with-current-continuation)
  (,$return))


; sys$continuation-data-structure  (Obsolete?)
;
; This procedure knows about the layout of the procedure created by
; call-with-current-continuation (above), and given such a procedure
; it returns the actual continuation structure stored in the environment
; of that procedure.  There is currently no way to distinguish a 
; continuation procedure from another procedure (we could do this by
; embedding a magic cookie in the procedure at a known spot) so
; use with extreme care.
;
; This procedure does not need to be written in MAL but it's easier
; to keep it in sync that way.

`((,$lambda ((,$.proc)
             (,$args=   1)
             (,$const   4)  ; Lexical slot 2 is procedure slot 4.
             (,$setreg  2)
             (,$reg     1)
             (,$op2     procedure-ref 2)
             (,$return))
            0
            #(#f #f 1 #f #f #f))
  (,$setglbl sys$continuation-data-structure)
  (,$const   sys$continuation-data-structure)
  (,$return))


; syscall
;
; Syscall has to be coded in mal because the arguments are passed in a
; non-standard way and because the compiler cannot handle a primitive
; with a variable, large, number of parameters.  Syscall is simply a
; trampoline into a millicode procedure.  RESULT has the number of 
; arguments, and the arguments are passed in registers as usual.

`((,$lambda ((,$.proc)
             (,$op1 syscall)
             (,$return))
            0
            #(#f #f 1.0 #f #f #f))
  (,$setglbl %syscall)
  (,$const   %syscall)
  (,$return))

; read-char
;
; read-char has been coded in MAL for performance -- it avoids consing
; up the varargs list.  We should keep this version even if the compiler
; is taught about read-char, because the interpreter will still call
; this version.
;
; The original is in Lib/stdio.h; make sure to reflect changes there.
; RESULT has the number of arguments.
;
; Incidentally, this is mostly how we'd generate code for case-lambda,
; and case-lambda is a better solution than MAL :-)

`((,$lambda ((,$setreg 2)
             (,$reg 2)
             (,$op2imm eq? 1)
             (,$branchf 1001)
             (,$global io/read-char)    ; One argument: pass it on.
             (,$invoke 1)
             (,$.label 1001)
             (,$reg 2)
             (,$op2imm eq? 0)
             (,$branchf 1002)
             (,$save 0)                 ; Zero arguments: get the port
             (,$store 0 0)
             (,$global current-input-port)
             (,$setrtn 1003)
             (,$invoke 0)
             (,$.align 4)
             (,$.label 1003)
             (,$.cont)
             (,$load 0 0)
             (,$setreg 1)
             (,$pop 0)
             (,$global io/read-char)
             (,$invoke 1)
             (,$.label 1002)            ; Other cases: an error.
             (,$const "read-char: Too many arguments.")
             (,$setreg 1)
             (,$global error)
             (,$invoke 1))
            0
            #(#f #f 0.0 #f #f #f))
  (,$setglbl read-char)
  (,$const read-char)
  (,$return))

; write-char
;
; write-char has been coded in MAL for performance; see comments for
; read-char, above.

`((,$lambda ((,$setreg 3)
             (,$reg 3)
             (,$op2imm eq? 2)
             (,$branchf 1001)
             (,$global io/write-char)   ; Two arguments: pass them on
             (,$invoke 2)
             (,$.label 1001)
             (,$reg 3)
             (,$op2imm eq? 1)
             (,$branchf 1002)
             (,$save 1)                 ; One argument: get the port
             (,$store 0 0)
             (,$store 1 1)
             (,$global current-output-port)
             (,$setrtn 1003)
             (,$invoke 0)
             (,$.align 4)
             (,$.label 1003)
             (,$.cont)
             (,$load 0 0)
             (,$load 1 1)
             (,$setreg 2)
             (,$pop 1)
             (,$global io/write-char)
             (,$invoke 2)
             (,$.label 1002)            ; Other cases: an error.
             (,$const "write-char: wrong number of arguments.")
             (,$setreg 1)
             (,$global error)
             (,$invoke 1))
            0
            #(#f #f 1.0 #f #f #f))
  (,$setglbl write-char)
  (,$const write-char)
  (,$return))


;; call-with-continuation-mark : key mark (-> 'a) -> 'a
;;
;; The essence of continuation mark semantics is the reduction rule
;; (with-continuation-mark/1 <mark1>
;;   (with-continuation-mark/1 <mark2> e))
;; -->
;; (with-continuation-mark/1 <marks2> e)
;;
;; The actual continuation marks system generalizes to multiple keys.
;;
;; The essence of the implementation is to detect on entry to 
;; with-continuation-mark whether the top of the stack is *already*
;; a with-continuation-mark frame.
;;   - If not, we add a new layer to the global variable that stores
;;     the continuation mark stack and evaluate the body expression in 
;;     non-tail context. When the body expression has produced a value,
;;     it is returned to the with-continuation-marks frame, which pops
;;     a layer off the continuation mark stack and returns the result.
;;   - If the top of the stack is already a with-continuation-mark frame,
;;     then we *collapse* the two 'with-continuation-marks' by just
;;     updating the continuation mark stack and tail-calling to the 
;;     evaluation of the body expression, so that it remains directly 
;;     inside the outer with-continuation-marks form.


;; We implement with-continuation-mark as a macro (see usual.sch)
;; in terms of call-with-continuation-mark.

;; Mark Frame structure
;; +---------------+
;; | RA | up | ENV |
;; +---------------+
;;   --   --  slot0
;;
;; On a mark frame, ENV will always be 'call-with-continuation-mark',
;; so we can test for that.

 `((,$lambda ((,$.proc)
              (,$args= 3)
              
              ;; Before we save, is the *current frame* a mark frame?
              ;; It's a mark frame iff it's ENV slot is CALL/CM, 
              ;; that is, the currently executing procedure.
              (,$load 4 0)      ;; Get the current frame's ENV slot => reg4
              (,$reg 0)         ;; Load self (call/cm) to Result
              (,$op2 eq? 4)     ;; Compare
              (,$branchf 1002)  ;; If different, save and invoke.
                                ;; Otherwise, fall though to overwrite.
              
              ;; ** Overwrite and invoke.
              ;; The CM frame already exists, and it will do cleanup
              ;; when the thunk returns. (see control.sch)
              (,$global sys$replace-mark/call-thunk)
              (,$invoke 3)
              
              ;; ** New CM frame needed
              (,$.label 1002)
              (,$save 1)        ;; Create a new CM frame
              (,$store 0 0)     ;; (Unnecessary?)
              (,$global *cms*)  ;; Result = *cms*
              (,$setreg 4)      ;; Reg 4 = *cms*
              (,$const ())      ;; Result = '()
              (,$setreg 5)      ;; Reg 5 = '()
              (,$reg 1)         ;; Result = key
              (,$op2 cons 2)    ;; Result = (cons key mark)
              ;(,$op2imm cons ())  ;; FIXME: Causes problems on linux86???
              (,$op2 cons 5)    ;; Result = (list (cons key mark))
              (,$op2 cons 4)    ;; Result = (cons (list (cons key mark)) *cms*)
              (,$setglbl *cms*) ;; *cms* := (cons (list (cons key mark)) *cms*)
              (,$reg 3)
              (,$setrtn 1001)     
              (,$invoke 0)      ;; Invoke the thunk... mark frame remains!
              
              ;; Now remove mark frame
              (,$.align 4)
              (,$.label 1001)
              (,$.cont)
              (,$load 0 0)        ;; Required invariant
              (,$setreg 1)        ;; Reg 1 = (thunk) result
              (,$global *cms*)    ;; Result = *cms*
              (,$op1 cdr)         ;; Result = (cdr *cms*)
              (,$setglbl *cms*)   ;; *cms* := (cdr *cms*)
              (,$reg 1)           ;; Result = (thunk) result
              (,$pop 1)
              (,$return))
             0
             #(#f #f 3 #f #f #f))
   (,$setglbl call-with-continuation-mark)
   (,$const   call-with-continuation-mark)
   (,$return))

; call-if-continuation-mark-frame : (-> A) x (-> B) -> A+B
; (call-if-continuation-mark-frame THEN ELSE) tail calls THEN
; if this is a mark frame, and tail calls ELSE if not.
`((,$lambda ((,$.proc)
             (,$args= 2)
             
             ;; Is the *current frame* a mark frame?
             ;; It's a mark frame iff it's ENV slot is CALL/CM, 
             ;; that is, the currently executing procedure.
             (,$load 3 0)      ;; Get the current frame's ENV slot => reg3
             (,$global call-with-continuation-mark) ;; Load call/cm to Result
             (,$op2 eq? 3)     ;; Compare
             (,$branchf 1002)  ;; If different, not a cm frame.
                               ;; If mark frame, fall though.

             ;; then:
             (,$reg 1)
             (,$invoke 0)
             
             ;; else:
             (,$.label 1002)
             (,$reg 2)
             (,$invoke 0))
            0
            #(#f #f 2 #f #f #f))
  (,$setglbl call-if-continuation-mark-frame)
  (,$const   call-if-continuation-mark-frame)
  (,$return))

;;; make-case-lambda is intended to make case-lambda more efficient.
;;; It should be equivalent to
;;;
;;;  (define (make-case-lambda proc)
;;;    (lambda args
;;;      (let ((n (length args)))
;;;        (case n
;;;         ((0) (proc 0 0 0 n))
;;;         ((1) (proc (car args) 0 0 n))
;;;         ((2) (proc (car args) (cadr args) 0 n))
;;;         ((3) (proc (car args) (cadr args) (caddr args) n))
;;;         (else
;;;          (assertion-violation 'case-lambda "bug in case-lambda" n))))))
;;;
;;; FIXME: that isn't as general as we'd like

`((,$lambda ((,$.proc)
             (,$args= 1)
             (,$lambda ((,$.proc)
                        (,$setreg  4)
                        (,$lexical 0 1)
                        (,$invoke  4))
                       1
                       #(#f #f 0.0 #f #f #f))
             (,$return))
            0
            #(#f #f 1 #f #f #f))
  (,$setglbl make-case-lambda)
  (,$const   make-case-lambda)
  (,$return))

; eof
