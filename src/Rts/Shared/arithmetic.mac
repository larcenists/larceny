; Copyright 1998 Lars T Hansen.              -*- mode: scheme -*-
;
; $Id$
;
; Petit Larceny -- templates for generic arithmetic code.
;
; This file should be processed with the expansion program "expander.sch",
; in a way documented below (in the C file header).  The output of that
; program will produce a C file that implements generic arithmetic.
; Using templates and expansions like this cuts the amount of code that
; has to be written and maintained by 1/2 to 2/3.

"
/* Rts/Standard-C/arithmetic.c
 * Petit Larceny -- generic arithmetic millicode.
 *
 * $Id$
 *
 * WARNING: This code has been auto-generated.  Edit 
 * Rts/Standard-C/arithmetic.mac instead and rerun the expander by 
 * loading expand.sch and then evaluating
 *   (expand-file \"arithmetic.mac\" \"arithmetic.c\")
 */

#define NOGLOBALS

#include \"larceny.h\"                  /* includes config.h also */
#include \"millicode.h\"
#include \"macros.h\"

#include <math.h>
#if defined( SUNOS4 ) || defined( SUNOS5 )
# include <sys/ieeefp.h>
#endif
#if defined( SUNOS4 )
# include <floatingpoint.h>
#endif

#define header_byte( obj, tag )  (*ptrof(obj)&255)  /* can do better */

#define setcc( c )  globals[ G_RESULT ] = ((c) ? TRUE_CONST : FALSE_CONST)

/* FIXME: these macros are not valid in a 64-bit setting! */
/* FIXME: these should be in macros.h, probably */
#if defined(BITS_64)
#  error \"Must fix some macros in arithmetic.mac for 64-bit compilation.\"
#endif

#define compnum_real( x )  (*(double*)((word)x-BVEC_TAG+2*sizeof(word)))
#define compnum_imag( x )  (*(double*)((word)x-BVEC_TAG+4*sizeof(word)))
#define flonum_val( x )    (*(double*)((word)x-BVEC_TAG+2*sizeof(word)))

extern double rint( double x );
extern double aint( double x );

#define round_to_even( x )    rint( x )
#define round_any( x )        rint( x )
#define round_to_zero( x )    aint( x )

#define is_integer( f )       (f == round_any( f ))
#define is_rational( f )      (0.0 == (f - f))

static void generic_binary_operation( word *globals, int op, cont_t k );
static void generic_unary_operation( word *globals, int op, cont_t k );
static void ga_box_int( word *globals, word w );
static void ga_box_longint( word *globals, word hi, word lo );
static void ga_box_word( word *globals, word x, int sign );
static void ga_box_flonum( word *globals, double d );
static void ga_box_compnum( word *globals, double r, double i );

void initialize_generic_arithmetic( void )
{
}

#ifndef G_SECOND
# define G_SECOND G_ARGREG2
# define G_THIRD  G_ARGREG3
#endif
"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Template: binary-decision-tree

(define-template 'binary-decision-tree
  '(name retry-name contagion-name error-code
        fixnum+fixnum flonum+flonum compnum+compnum 
        bignum+bignum-code ratnum+ratnum-code rectnum+rectnum)
"
void EXPORT @name@( word *globals, cont_t k )
{
  word x = globals[ G_RESULT ];
  word y = globals[ G_SECOND ];
  word retry;
  int t1, t2, h1, h2;

  t1 = tagof( x );
  t2 = tagof( y );
  if (t1 == BVEC_TAG) {
    if (t2 != BVEC_TAG) goto mixed;
    h1 = header_byte( x, BVEC_TAG );
    h2 = header_byte( y, BVEC_TAG );
    if (h1 == FLONUM_HDR) {
      if (h2 == FLONUM_HDR) {
        @flonum+flonum@
      }
      else
        goto mixed;
    }
    else if (h1 == COMPNUM_HDR) {
      if (h2 == COMPNUM_HDR) {
        @compnum+compnum@
      }
      else
        goto mixed;
    }
    else if (h1 == BIGNUM_HDR) {
      if (h2 == BIGNUM_HDR)
        generic_binary_operation( globals, @bignum+bignum-code@, k );
      else
        goto mixed;
    }
    else
      goto error;
  }
  else if (is_both_fixnums( t1, t2 )) {
    @fixnum+fixnum@
  }
  else if (t1 == VEC_TAG) {
    if (t2 != VEC_TAG) goto mixed;
    h1 = header_byte( x, VEC_TAG );
    h2 = header_byte( y, VEC_TAG );
    if (h1 == RATNUM_HDR) {
      if (h2 == RATNUM_HDR) 
        generic_binary_operation( globals, @ratnum+ratnum-code@, k );
      else
        goto mixed;
    }
    else if (h1 == RECTNUM_HDR) {
      if (h2 == RECTNUM_HDR) {
        @rectnum+rectnum@
      }
      else
        goto mixed;
    }
    else
      goto error;
  }
  else
    goto mixed;
  return;

 mixed:
  /* Call the contagion procedure.  THIRD has the retry procedure,
     which must be fetched from the callout vector.
     */
  retry = global_cell_ref( globals[ G_CALLOUTS ] );
#ifndef NDEBUG
  if (retry == UNDEFINED_CONST)
    panic_exit( \"@name@: No contagion procedure defined.\" );
#endif
  globals[ G_THIRD ] = vector_ref( retry, @retry-name@ );
#ifndef NDEBUG
  if (tagof( globals[ G_THIRD ] ) != PROC_TAG)
    panic_exit( \"@name@: Contagion procedure is not a procedure.\" );
#endif
  mc_scheme_callout( globals, @contagion-name@, 3, k, 0 );
  return;

 error:
  mc_cont_exception( globals, @error-code@, k );
}
")

; The procedures +, -, *, / use this abstraction.

(define (standard-arithmetic name name2 fixcode flocode compcode)
  (expand-template
   'binary-decision-tree 
   `((name ,name)
     (retry-name ,(string-append "MS_GENERIC_" name2))
     (contagion-name "MS_CONTAGION")
     (error-code ,(string-append "EX_" name2))
     (fixnum+fixnum ,fixcode)
     (flonum+flonum ,flocode)
     (compnum+compnum ,compcode)
     (bignum+bignum-code ,(string-append "MS_BIGNUM_" name2))
     (ratnum+ratnum-code ,(string-append "MS_RATNUM_" name2))
     (rectnum+rectnum
      ,(string-append 
        "generic_binary_operation( globals, MS_RECTNUM_" name2 ", k );")))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Template: unary-decision-tree

(define-template 'unary-decision-tree
  '(name exception 
    extra extra-arg
    fixnum-code flonum-code compnum-code bignum-code ratnum-code rectnum-code
    otherwise)
"
void EXPORT @name@( word *globals @extra@ )
{
  word x = globals[ G_RESULT ];
  if (is_fixnum(x)) {
    @fixnum-code@
  }
  else if (isptr( x )) {
    unsigned h = *ptrof( x ) & 255;
    if (h == FLONUM_HDR) {
      @flonum-code@
    }
    else if (h == COMPNUM_HDR) {
      @compnum-code@
    } 
    else if (h == BIGNUM_HDR) {
      @bignum-code@
    }
    else if (h == RATNUM_HDR) {
      @ratnum-code@
    } 
    else if (h == RECTNUM_HDR) {
      @rectnum-code@
    }
    else {
      @otherwise@
    }
  }
  else {
    @otherwise@
  }
  return;

 error:
  mc_cont_exception( globals, @exception@, @extra-arg@ );
}
")

(define (unary-decision-tree name exception fix flo comp big rat rect k? other)
  (expand-template
   'unary-decision-tree
   `((name ,name)
     (extra ,(if k? ", cont_t k" ""))
     (extra-arg ,(if k? "k" "0"))
     (exception ,exception)
     (fixnum-code ,(or fix "/*nothing*/"))
     (flonum-code ,(or flo "/*nothing*/"))
     (compnum-code ,(or comp "/*nothing*/"))
     (bignum-code ,(or big "/*nothing*/"))
     (ratnum-code ,(or rat "/*nothing*/"))
     (rectnum-code ,(or rect "/*nothing*/"))
     (otherwise ,(or other "goto error;")))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; mc_add
; Fixnums with no overflow is handled in-line.

(standard-arithmetic "mc_add" "ADD" 
"ga_box_int(globals, (int)nativeint(x)+(int)nativeint(y));"
"ga_box_flonum(globals, flonum_val(x)+flonum_val(y));"
"ga_box_compnum(globals, compnum_real(x)+compnum_real(y), 
                      compnum_imag(x)+compnum_imag(y));
"

)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; mc_sub
; Fixnums with no overflow is handled in-line.

(standard-arithmetic "mc_sub" "SUB"
"ga_box_int(globals, (int)nativeint(x)-(int)nativeint(y));"
"ga_box_flonum(globals, flonum_val(x)-flonum_val(y));"
"ga_box_compnum(globals, compnum_real(x)-compnum_real(y),
                      compnum_imag(x)-compnum_imag(y));
")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; mc_mul
; Fixnum case may or may not have been handled in-line.
; We use gcc's long long when possible since it's presumably faster
; than the portable routine (this should be substantiated).
; FIXME: currently disabled long long for reasons of testing the standard code.

(standard-arithmetic "mc_mul" "MUL"
"
/* DEC C compiler may have problems with the #if not at SOL? */
#if defined( __GNUC__ ) && 0
  long long int res = (long long)nativeint( x ) * (long long)nativeint( y );
  ga_box_longint( globals, (int)(res >> 32), (int)res );
#else
  word res_hi, res_lo;
  mul_32x32_to_64( (word)nativeint(x), (word)nativeint(y), &res_hi, &res_lo );
  ga_box_longint( globals, res_hi, res_lo );
#endif
"
"ga_box_flonum( globals, flonum_val(x)*flonum_val(y));"
"
double xr = compnum_real( x );
double xi = compnum_imag( x );
double yr = compnum_real( y );
double yi = compnum_imag( y );
double zr = 0;
double zi = 0;
if (xi != 0.0 && yi != 0.0) {
  zr = (xr * yr)-(xi * yi);
  zi = (xi * yr)+(xr * yi);
} else if (yi == 0.0) {
  zr = xr * yr;
  zi = xi * yr;
} else if (xi == 0.0) {
  zr = xr * yr;
  zi = xr * yi;
}
ga_box_compnum( globals, zr, zi );
")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; mc_div
; Fixnum case may or may not have been handled in-line.

(standard-arithmetic "mc_div" "DIV"
; If the remainder of the division is 0, then we return a result
; as expected; otherwise, the operation will generate a ratnum and
; the whole thing is pushed into Scheme.
"
#if defined(EXPLICIT_DIVZ_CHECK)
if (y == 0) mc_exception( globals, EX_DIV );
#endif
if ((int)x % (int)y == 0)
  globals[ G_RESULT ] = fixnum( (int)x / (int)y );
else
  generic_binary_operation( globals, MS_FIXNUM2RATNUM_DIV, k );
"
"ga_box_flonum( globals, flonum_val(x) / flonum_val(y) );"
; Translated from the Scheme rectnum code (Lib/rectnums.sch), which
; cites Numerical Programming in C.
"
double xr = compnum_real( x );
double xi = compnum_imag( x );
double yr = compnum_real( y );
double yi = compnum_imag( y );
if (fabs( yr ) >= fabs( yi )) {
  double r = yi / yr;
  double den = yr + r * yi;
  ga_box_compnum( globals, (xr + r*xi) / den, (xi - r*xr) / den );
}
else {
  double r = yr / yi;
  double den = yi + r * yr;
  ga_box_compnum( globals, (r*xr + xi) / den, (r*xi - xr) / den );
}
")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; mc_quo
; mc_rem
;
; Quotient must work on all integer operands, including flonums and compnums
; that are representable as integers. In order to preserve the programmer's
; sanity, only two cases are handled in millicode; all other arguments are 
; passed to the "generic-quotient" procedure (in Scheme).
;
; The two cases handled in millicode are:
;  - both operands are fixnums
;  - the lhs is a positive 32-bit bignum and the rhs is a positive fixnum
; The second case complicates the code but makes bignum arithmetic
; more pleasant to implement in Scheme.
;
; Remainder is just like quotient.

"
#if BVEC_HEADER_WORDS != 1
  /* This changes the bignum layout */
# error \"Still a few bugs in the system\"
#endif

/* These operate on the bignum metaword (sign/length) */

#define bigmeta_length( x ) (x & 0xFFFFFF)
#define bigmeta_sign( x ) ((x >> 24) & 1)

void EXPORT mc_quo( word *globals, cont_t k )
{
  word x = globals[ G_RESULT ];
  word y = globals[ G_SECOND ];

  if (is_both_fixnums( x, y )) {
#if defined(EXPLICIT_DIVZ_CHECK)
    if (y == 0) mc_exception( globals, EX_QUOTIENT );
#endif
/*  This doesn't work for (/ (least-fixnum) -1)          */
/*  globals[ G_RESULT ] = fixnum((s_word)x / (s_word)y); */
    ga_box_int(globals, (s_word)x / (s_word)y);
    return;
  }
  else if (tagof( x ) == BVEC_TAG && 
           header_byte(x, BVEC_TAG) == BIGNUM_HDR &&
           is_nonnegative_fixnum( y )) {
    word z = *(ptrof( x )+1);
    if (bigmeta_length(z) == 1 && bigmeta_sign(z) == 0) {
#if defined(EXPLICIT_DIVZ_CHECK)
      if (y == 0) mc_exception( globals, EX_QUOTIENT );
#endif
      z = *(ptrof( x )+2) / (y >> 2);
      ga_box_longint( globals, 0, z );
      return;
    }
  }
  generic_binary_operation( globals, MS_HEAVY_QUOTIENT, k );
}

void EXPORT mc_rem( word *globals, cont_t k )
{
  word x = globals[ G_RESULT ];
  word y = globals[ G_SECOND ];

  if (is_both_fixnums( x, y )) {
#if defined(EXPLICIT_DIVZ_CHECK)
    if (y == 0) mc_exception( globals, EX_REMAINDER );
#endif
    globals[ G_RESULT ] = fixnum((s_word)nativeint(x) % (s_word)nativeint(y));
    return;
  }
  else if (tagof( x ) == BVEC_TAG && 
           header_byte(x, BVEC_TAG) == BIGNUM_HDR &&
           is_nonnegative_fixnum( y )) {
    word z = *(ptrof( x )+1);
    if (bigmeta_length(z) == 1 && bigmeta_sign(z) == 0) {
#if defined(EXPLICIT_DIVZ_CHECK)
      if (y == 0) mc_exception( globals, EX_REMAINDER );
#endif
      z = *(ptrof( x )+2) % (y >> 2);
      ga_box_longint( globals, 0, z );
      return;
    }
  }
  generic_binary_operation( globals, MS_HEAVY_REMAINDER, k );
}
"


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; mc_neg
;
; The fixnum case is always handled in line, except when the number is
; the largest negative fixnum.

(unary-decision-tree
 "mc_neg" "EX_NEG"
 "globals[ G_SECOND ] = globals[ G_RESULT ];
  globals[ G_RESULT ] = fixnum( 0 );
  mc_sub( globals, k );
  "
 "ga_box_flonum( globals, -flonum_val( x ) );"
 "ga_box_compnum( globals, -compnum_real(x), -compnum_imag(x) );"
 "generic_unary_operation( globals, MS_BIGNUM_NEGATE, k );"
 "generic_unary_operation( globals, MS_RATNUM_NEGATE, k );"
 "generic_unary_operation( globals, MS_RECTNUM_NEGATE, k );"
 #t #f)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; mc_abs
;
; The fixnum case ins handled in-line.

(unary-decision-tree
 "mc_abs" "EX_ABS"
 #f
 "ga_box_flonum( globals, fabs( flonum_val( x ) ) );"
 "mc_cont_exception( globals, EX_ABS, k );"
 "generic_unary_operation( globals, MS_BIGNUM_ABS, k );"
 "mc_cont_exception( globals, EX_ABS, k );"
 "mc_cont_exception( globals, EX_ABS, k );"
 #t
 #f)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; mc_zerop
;
; In principle, there are no  bignums, rectnums, or ratnums that are zero.
; However, parts of the libraries temporarily invalidate this assumption,
; and it's convenient to support that here. Hence some extra complexity.
; However, we do not go all the way; a 0 rectnum has to have 0 fixnums in
; both slots, and a bignum is zero only if it has zero digits.

(unary-decision-tree
 "mc_zerop" "EX_ZEROP"
 "setcc( x == fixnum(0) );"
 "setcc( flonum_val( x ) == 0.0 );"
 "setcc( compnum_real(x) == 0.0 && compnum_imag(x) == 0.0 );"
 "word hdr = *ptrof( x );
  setcc( (hdr & 0xFFFF) == 0 );  /* 0 digits */  /* big-endian specific?? */
 "
 "setcc( vector_ref( x, 0 ) == fixnum(0) );"
 "setcc( vector_ref( x, 0 ) == fixnum(0) && vector_ref( x, 1 ) == fixnum(0) );"
 #f #f)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; mc_equalp
; The fixnum case is handled in line, _but_ may have overflowed, so must
; be handled again.

(expand-template
 'binary-decision-tree 
 '((name "mc_equalp")
   (retry-name "MS_GENERIC_EQUAL")
   (contagion-name "MS_ECONTAGION")
   (error-code "EX_EQUALP")
   (fixnum+fixnum "setcc( (int)nativeint(x) == (int)nativeint(y) );")
   (flonum+flonum "setcc( flonum_val(x) == flonum_val(y) );")
   (compnum+compnum "
setcc( compnum_real(x)==compnum_real(y) && compnum_imag(x)==compnum_imag(y) );
")
   (bignum+bignum-code "MS_BIGNUM_EQUAL")
   (ratnum+ratnum-code "MS_RATNUM_EQUAL")
   (rectnum+rectnum
    "generic_binary_operation( globals, MS_RECTNUM_EQUAL, k );")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; mc_lessp
; mc_less_or_equalp
; mc_greaterp
; mc_greater_or_equalp
;
; Fixnums are done in-line.
; Compnums and rectnums are not in the domain of this function.

(define (order-not-equal name name2 op)
  (expand-template
   'binary-decision-tree 
   `((name ,name)
     (retry-name ,(string-append "MS_GENERIC_" name2))
     (contagion-name "MS_PCONTAGION")
     (error-code ,(string-append "EX_" name2 "P"))
     (fixnum+fixnum 
      ,(apply string-append
              "setcc( (int)nativeint(x) " op " (int)nativeint(y) );" '()))
     (flonum+flonum 
      ,(apply string-append 
              "setcc( flonum_val(x) " op " flonum_val(y) );" '()))
     (compnum+compnum "goto error;")
     (bignum+bignum-code ,(string-append "MS_BIGNUM_" name2))
     (ratnum+ratnum-code ,(string-append "MS_RATNUM_" name2))
     (rectnum+rectnum "goto error;"))))

(order-not-equal "mc_lessp" "LESS" "<")
(order-not-equal "mc_less_or_equalp" "LESSEQ" "<=")
(order-not-equal "mc_greaterp" "GREATER" ">")
(order-not-equal "mc_greater_or_equalp" "GREATEREQ" ">=")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; mc_complexp
; mc_rationalp  (which is now real?, not rational?)
; mc_integerp

(let ((true "globals[ G_RESULT ] = TRUE_CONST;")
      (false "globals[ G_RESULT ] = FALSE_CONST;"))
  (unary-decision-tree
   "mc_complexp" "0/* none */"
   true true true true true true #f false))

(let ((true "globals[ G_RESULT ] = TRUE_CONST;")
      (false "globals[ G_RESULT ] = FALSE_CONST;"))
  (unary-decision-tree
   "mc_rationalp" "0/* none */"
   true true false
   true true false #f false))

(let ((true "globals[ G_RESULT ] = TRUE_CONST;")
      (false "globals[ G_RESULT ] = FALSE_CONST;"))
  (unary-decision-tree
   "mc_integerp" "0/* none */"
   true 
   "double v = flonum_val( x );
setcc( is_integer( v ) && is_rational( v ) );
"
   false
   true false false #f false))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; mc_exactp
; mc_inexactp

(define (exactness-test name exact? exception)
  (let ((true "globals[ G_RESULT ] = TRUE_CONST;")
        (false "globals[ G_RESULT ] = FALSE_CONST;"))
    (unary-decision-tree
     name exception
     (if exact? true false)
     (if exact? false true)
     (if exact? false true)
     (if exact? true false)
     (if exact? true false)
     (if exact? true false)
     #f #f)))

(exactness-test "mc_exactp" #t "EX_EXACTP")
(exactness-test "mc_inexactp" #f "EX_INEXACTP")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; mc_exact2inexact
; mc_inexact2exact
; mc_real_part
; mc_imag_part

(unary-decision-tree 
 "mc_exact2inexact" "EX_E2I"
 "ga_box_flonum( globals, (double)(int)nativeint( x ) );"
 #f
 #f
 "generic_unary_operation( globals, MS_GENERIC_EXACT2INEXACT, k );"
 "generic_unary_operation( globals, MS_GENERIC_EXACT2INEXACT, k );"
 "generic_unary_operation( globals, MS_GENERIC_EXACT2INEXACT, k );"
 #t #f)

(unary-decision-tree
 "mc_inexact2exact" "EX_I2E"
 #f
 "generic_unary_operation( globals, MS_GENERIC_INEXACT2EXACT, k );"
 "generic_unary_operation( globals, MS_GENERIC_INEXACT2EXACT, k );"
 #f #f #f #t #f)

(unary-decision-tree
 "mc_real_part" "EX_REALPART"
 #f #f
 "ga_box_flonum( globals, compnum_real( x ) );"
 #f #f
 "globals[ G_RESULT ] = vector_ref( x, 0 );"
 #f #f)

(unary-decision-tree
 "mc_imag_part" "EX_IMAGPART"
 "globals[ G_RESULT ] = fixnum(0);"
 "globals[ G_RESULT ] = fixnum(0);"
 "ga_box_flonum( globals, compnum_imag( x ) );"
 "globals[ G_RESULT ] = fixnum(0);"
 "globals[ G_RESULT ] = fixnum(0);"
 "globals[ G_RESULT ] = vector_ref( x, 1 );"
 #f #f)

(unary-decision-tree
 "mc_round" "EX_ROUND"
 #f                                     ; fixnum - nothing
 "double v = flonum_val( x ); ga_box_flonum( globals, round_to_even( v ) );"
 "goto error;"                          ; compnum
 #f                                     ; bignum - nothing
 "generic_unary_operation( globals, MS_RATNUM_ROUND, k );"  ; ratnum
 "goto error;"                          ; rectnum
 #t                                     ; has a continuation
 #f)

(unary-decision-tree
 "mc_truncate" "EX_TRUNC"
 #f
 "double v = flonum_val( x ); ga_box_flonum( globals, round_to_zero( v ) );"
 "goto error;"                          ; compnum
 #f 
 "generic_unary_operation( globals, MS_RATNUM_TRUNCATE, k );"
 "goto error;"
 #t
 #f)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Support code

"
static void generic_binary_operation( word *globals, int op, cont_t k )
{
  mc_scheme_callout( globals, op, 2, k, 0 );
}

static void generic_unary_operation( word *globals, int op, cont_t k )
{
  mc_scheme_callout( globals, op, 1, k, 0 );
}

#if !BITS_32
  /* The following procedures are 32-bit specific */
# error \"Still a few bugs in the system.\"
#endif

/* Call this to process a one-word two's complement integer result.
   Stores a fixnum or a one-word bignum in RESULT.
   */
static void ga_box_int( word *globals, word x )
{
  if ((x & 0xe0000000) == 0 || (x & 0xe0000000) == 0xe0000000) 
    globals[ G_RESULT ] = fixnum( x );
  else if ((int)x < 0)
    ga_box_word( globals, -(int)x, 1 );
  else
    ga_box_word( globals, x, 0 );
}

/* Call this to process a two-word two's complement integer result.
   Stores a fixnum, a one-word bignum, or a two-word bignum in RESULT.
   */
static void ga_box_longint( word *globals, word hi, word lo )
{
  if (hi == 0) { 
    if ((lo & 0xe0000000) == 0) 
      globals[ G_RESULT ] = fixnum( lo );
    else
      ga_box_word( globals, lo, 0 );
  }
  else if (hi == ~0 && lo != 0) {
    if ((lo & 0xe0000000) == 0xe0000000)
      globals[ G_RESULT ] = fixnum( lo );
    else
      ga_box_word( globals, -(int)lo, 1 );
  }
  else {
    int sign = 0;
    if ((int)hi < 0) {
      sign = 1;
      lo = ~lo + 1; hi = ~hi;
      if (lo == 0) hi += 1;
    }   
    if (hi == 0)
      ga_box_int( globals, (int)lo );
    else {
      word *p;

      globals[ G_RESULT ] = fixnum(4*sizeof(word));
      mc_alloc_bv( globals );
      p = (word*)globals[ G_RESULT ];
      p[0] = mkheader( 3*sizeof(word), BIGNUM_HDR );
      p[1] = mkbignum_header( sign, 2 );
      p[2] = lo;
      p[3] = hi;
      globals[ G_RESULT ] = tagptr( p, BVEC_TAG );
    }
  }
}

/* Box an sign/magnitude integer value in a one-word bignum */

static void ga_box_word( word *globals, word x, int sign )
{
  word *p;

  globals[ G_RESULT ] = fixnum(3*sizeof(word));
  mc_alloc_bv( globals );
  p = (word*)globals[ G_RESULT ];
  p[0] = mkheader( 2*sizeof(word), BIGNUM_HDR );
  p[1] = mkbignum_header( sign, 1 );
  p[2] = x;
  globals[ G_RESULT ] = tagptr( p, BVEC_TAG );
}

static void ga_box_flonum( word *globals, double d )
{
  word *p;

  globals[ G_RESULT ] = fixnum(4*sizeof(word));
  mc_alloc_bv( globals );
  p = (word*)globals[ G_RESULT ];
  *p = mkheader( 3*sizeof(word), FLONUM_HDR );
  *(double*)(p+2) = d;
  globals[ G_RESULT ] = tagptr( p, BVEC_TAG );
}

static void ga_box_compnum( word *globals, double r, double i )
{
  word *p;
  globals[ G_RESULT ] = fixnum(6*sizeof(word));
  mc_alloc_bv( globals );
  p = (word*)globals[ G_RESULT ];
  *p = mkheader( 5*sizeof(word), COMPNUM_HDR );
  *(double*)(p+2) = r;
  *(double*)(p+4) = i;
  globals[ G_RESULT ] = tagptr( p, BVEC_TAG );
}

"

; eof

