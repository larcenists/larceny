; -*- mode: scheme -*-
;
; Copyright 1998 Lars T Hansen.
;
; Configuration file for Fence register names, ARMv6 / ARMv7.
;
; Uses the platform register (r9) as GLOBALS, which should be okay
; on most Linux platforms.  For platforms that make r9 unavailable
; to us, use fence-arm-regs0.cfg instead (as is selected by calling
; the setup procedure with 'target: 'linux-arm-el-hardfp0 instead of
; 'linux-arm-el-hardfp).
;
; It should be possible to gain another argument register by using
; r13 (sp) as STKP, but that will require changes to
;
;      src/Asm/Fence/pass5p2-arm.sch
;      src/Rts/Fence/arm-millicode.sx
;
; The former's arm.reg procedure must be changed, and the latter's
; SAVE_SCHEME_CONTEXT and LOAD_SCHEME_CONTEXT.  It looks as though
; a red zone will also be necessary; search for "sce.buffer" and
; "SCE_BUFFER" in the corresponding files for IAssassin.

(define-files "regs.ch" "regs.ah" "regs.sch")

; These are platform-invariant and the hardware mappings are private
; between the Cant back-ends and the (minimal) assembly code in the
; Rts to support millicode.  At least for now.

(define-const result    "-1" #f #f "$r.result")
(define-const second    "-2" #f #f "$r.second")
(define-const stkp      "-3" #f #f "$r.stkp")
(define-const globals   "-4" #f #f "$r.globals")
(define-const tmp       "-5" #f #f "$r.tmp")
(define-const reg0      "0"  #f #f "$r.reg0")

; These are specific to the ARM mapping.
;
; This mapping uses the platform register (r9).
; To avoid the platform register, specify 'target: 'linux-arm-el-hardfp0
; in the call to setup.
; (We need a better mechanism to parameterize on platform here.)

; ARM hardware register assignments for MacScheme registers.
;
; Note: TMP0 cannot be the same as LR (r14).

(define-const armREG0     "0" #f #f "arm.REG0")
(define-const armREG1     "1" #f #f "arm.REG1")
(define-const armREG2     "2" #f #f "arm.REG2")
(define-const armREG3     "3" #f #f "arm.REG3")
(define-const armREG4     "4" #f #f "arm.REG4")
(define-const armREG5     "5" #f #f "arm.REG5")
(define-const armREG6     "6" #f #f "arm.REG6")
(define-const armREG7     "7" #f #f "arm.REG7")
(define-const armSTKP     "8" #f #f "arm.STKP")   ; FIXME
(define-const armGLOBALS  "9" #f #f "arm.GLOBALS")
(define-const armRESULT  "10" #f #f "arm.RESULT")
(define-const armSECOND  "11" #f #f "arm.SECOND")
(define-const armTMP0    "12" #f #f "arm.TMP0")   ; This is $r.tmp in pass5p2.
(define-const armTMP1    "14" #f #f "arm.TMP1")   ; Not exposed to pass5p2.



; Other ARM hardware registers.  FP=R11, not used here.

(define-const armSP     "13" #f #f "arm.SP")
(define-const armLR     "14" #f #f "arm.LR")
(define-const armPC     "15" #f #f "arm.PC")

(define-const _reg0    (string-append "r" armREG0)    #f "REG0"    #f)
(define-const _reg1    (string-append "r" armREG1)    #f "REG1"    #f)
(define-const _reg2    (string-append "r" armREG2)    #f "REG2"    #f)
(define-const _reg3    (string-append "r" armREG3)    #f "REG3"    #f)
(define-const _reg4    (string-append "r" armREG4)    #f "REG4"    #f)
(define-const _reg5    (string-append "r" armREG5)    #f "REG5"    #f)
(define-const _reg6    (string-append "r" armREG6)    #f "REG6"    #f)
(define-const _reg7    (string-append "r" armREG7)    #f "REG7"    #f)
(define-const _result  (string-append "r" armRESULT)  #f "RESULT"  #f)
(define-const _second  (string-append "r" armSECOND)  #f "SECOND"  #f)
(define-const _globals (string-append "r" armGLOBALS) #f "GLOBALS" #f)
(define-const _stkp    (string-append "r" armSTKP)    #f "STKP"    #f)
(define-const _tmp0    (string-append "r" armTMP0)    #f "TMP0"    #f)
(define-const _tmp1    (string-append "r" armTMP1)    #f "TMP1"    #f)

; These are also specific to the ARM mapping.


(define-const _lastreg  "7"  "LASTREG" "LASTREG" "*lastreg*")
(define-const _nregs    "8"  "NREGS"   "NREGS"   "*nregs*")
(define-const _nhwregs  "8"  #f        #f        "*nhwregs*")

; eof
