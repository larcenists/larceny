; Copyright 1998-2012 Lars T Hansen.              -*- mode: scheme -*-
;
; Configuration file for the "globals" table, Fence/Cant target.
;
; 2012-07-23 / lth@acm.org

(define-files "globals.ch" "globals.ah" "globals.sch")
(define-table #f "fence-table.sx")

(define-const heap-version "10" "HEAP_VERSION" #f #f)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Some constants
;;
;; These are used by compiled scheme, not by the compiler, so the Scheme 
;; values should not be adjusted! However, the assembly constants should
;; be adjusted, as they are used as arguments to C callouts.

(define-action assembly (lambda (x) (* x 4)))
(define-action scheme (lambda (x) x))

(include "src/Rts/memstats.cfg")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Globals
;;
;; These are used by the compiler and must be adjusted.

(define-action scheme (lambda (x) (* x 4)))
(define-action assembly (lambda (x) (* x 4)))

;; Even on platforms that have fewer registers than REG31 we have to
;; have at least G_REG5, in order to support the syscall mechanism,
;; though that is clearly fixable.

(start-roots)
(define-global "G_RESULT"  "G_RESULT"  "$g.result")
(define-global "G_SECOND"  "G_SECOND"  "$g.second")
(define-global "G_THIRD"   "G_THIRD"   "$g.third")
(define-global "G_FOURTH"  "G_FOURTH"  "$g.fourth")
(define-global "G_REG0"    "G_REG0"    "$g.reg0")
(define-global "G_REG1"    "G_REG1"    "$g.reg1")
(define-global "G_REG2"    "G_REG2"    "$g.reg2")
(define-global "G_REG3"    "G_REG3"    "$g.reg3")
(define-global "G_REG4"    "G_REG4"    "$g.reg4")
(define-global "G_REG5"    "G_REG5"    "$g.reg5")
(define-global "G_REG6"    "G_REG6"    "$g.reg6")
(define-global "G_REG7"    "G_REG7"    "$g.reg7")
(define-global "G_REG8"    "G_REG8"    "$r.reg8")
(define-global "G_REG9"    "G_REG9"    "$r.reg9")
(define-global "G_REG10"   "G_REG10"   "$r.reg10")
(define-global "G_REG11"   "G_REG11"   "$r.reg11")
(define-global "G_REG12"   "G_REG12"   "$r.reg12")
(define-global "G_REG13"   "G_REG13"   "$r.reg13")
(define-global "G_REG14"   "G_REG14"   "$r.reg14")
(define-global "G_REG15"   "G_REG15"   "$r.reg15")
(define-global "G_REG16"   "G_REG16"   "$r.reg16")
(define-global "G_REG17"   "G_REG17"   "$r.reg17")
(define-global "G_REG18"   "G_REG18"   "$r.reg18")
(define-global "G_REG19"   "G_REG19"   "$r.reg19")
(define-global "G_REG20"   "G_REG20"   "$r.reg20")
(define-global "G_REG21"   "G_REG21"   "$r.reg21")
(define-global "G_REG22"   "G_REG22"   "$r.reg22")
(define-global "G_REG23"   "G_REG23"   "$r.reg23")
(define-global "G_REG24"   "G_REG24"   "$r.reg24")
(define-global "G_REG25"   "G_REG25"   "$r.reg25")
(define-global "G_REG26"   "G_REG26"   "$r.reg26")
(define-global "G_REG27"   "G_REG27"   "$r.reg27")
(define-global "G_REG28"   "G_REG28"   "$r.reg28")
(define-global "G_REG29"   "G_REG29"   "$r.reg29")
(define-global "G_REG30"   "G_REG30"   "$r.reg30")
(define-global "G_REG31"   "G_REG31"   "$r.reg31")

(define-global "G_STARTUP"  "G_STARTUP"  "$g.startup")  ; startup procedure
(define-global "G_CALLOUTS" "G_CALLOUTS" "$g.callouts") ; millicode callouts
(define-global "G_CONT"     "G_CONT"     "$g.cont")

; save area for inline alloc
(define-global #f           "G_ALLOCTMP" "$g.alloctmp")
; save area for mutation ops (SATB support)
(define-global #f           "G_WRITETMP" "$g.writetmp") 
; work space for mc_restargs
(define-global "G_REST0"    #f           "$g.rest0")
(define-global "G_REST1"    #f           "$g.rest1")
(define-global "G_REST2"    #f           "$g.rest2")

(end-roots)

;; The timer register is not a root.

(define-global "G_TIMER" "G_TIMER"   "$g.timer")

;; Non-root context variables.

(define-global "G_RETADDR"        "G_RETADDR" #f)

;; Memory management. The millicode needs the first few of these, so
;; if you don't move them you don't need to recompile the entire
;; heap.

(define-global "G_STKP"           "G_STKP" "$g.stkp")
(define-global "G_STKBOT"         "G_STKBOT" "$g.stkbot")
(define-global "G_EBOT"           "G_EBOT" "$g.ebot")
(define-global "G_ETOP"           "G_ETOP" "$g.etop")
(define-global "G_ELIM"           "G_ELIM" "$g.elim")
(define-global "G_TBOT"           #f #f)
(define-global "G_TTOP"           #f #f)
(define-global "G_TLIM"           #f #f)
(define-global "G_TBRK"           "G_TBRK" #f)
(define-global "G_SSBBOT"         #f #f)
(define-global "G_SSBTOP"         "G_SSBTOP" #f)
(define-global "G_SSBLIM"         "G_SSBLIM" #f)
(define-global "G_ESPACE1_BOT"    #f #f)
(define-global "G_ESPACE1_LIM"    #f #f)
(define-global "G_ESPACE2_BOT"    #f #f)
(define-global "G_ESPACE2_LIM"    #f #f)
(define-global "G_TSPACE1_BOT"    #f #f)
(define-global "G_TSPACE1_LIM"    #f #f)
(define-global "G_TSPACE2_BOT"    #f #f)
(define-global "G_TSPACE2_LIM"    #f #f)
(define-global "G_REMSET_POOLBOT" #f #f)
(define-global "G_REMSET_POOLTOP" #f #f)
(define-global "G_REMSET_POOLLIM" #f #f)
(define-global "G_REMSET_TBLBOT"  #f #f)
(define-global "G_REMSET_TBLLIM"  #f #f)
(define-global "G_STATIC_BOT"     #f #f)
(define-global "G_STATIC_TOP"     #f #f)
(define-global "G_STATIC_LIM"     #f #f)
(define-global "G_EWATERMARK"     #f #f)  ; ephemeral high-watermark
(define-global "G_THIWATERMARK"   #f #f)  ; tenured high-watermark
(define-global "G_TLOWATERMARK"   #f #f)  ; tenured low-watermark
(define-global "G_RWATERMARK"     #f #f)  ; remembered-set high-watermark
(define-global "G_GC_MUST_TENURE" #f #f)
(define-global "G_NP_YOUNG_GEN" "G_NP_YOUNG_GEN" #f)  ; np young gen#

; index in sbbtop/ssblim vectors of pointers for np extra remset

(define-global "G_NP_YOUNG_GEN_SSBIDX" "G_NP_YOUNG_GEN_SSBIDX" #f)

; A pointer to the garbage collector (type gc_t*).

(define-global "G_GC" "G_GC" #f)

; The number of garbage collections since startup (a fixnum).

(define-global "G_GC_CNT" "G_GC_CNT" "$g.gccnt")

; The number of major garbage collections since startup (a fixnum).
; All collections are major unless they involve the nursery only.

(define-global "G_MAJORGC_CNT" "G_MAJORGC_CNT" "$g.majorgccnt")

; Generation number of dynamic generation, for DOF write barrier.

(define-global "G_DYNAMIC_GEN" "G_DYNAMIC_GEN" #f)

;; process management

(define-global "G_SINGLESTEP_ENABLE" "G_SINGLESTEP_ENABLE" #f)
(define-global "G_BREAKPT_ENABLE" "G_BREAKPT_ENABLE" #f)
(define-global "G_TIMER_ENABLE"   "G_TIMER_ENABLE" #f)

;; Misc.

(define-global #f "G_SAVED_SP" #f)            ; Save slot for C context
(define-global #f "G_SAVED_FP" #f)            ; Save slot for C context
(define-global #f "G_SCHCALL_PROCIDX" #f)
(define-global #f "G_SCHCALL_ARGC" #f)
(define-global "G_PUSHTMP" "G_PUSHTMP" #f)
(define-global "G_CALLOUT_TMP0" "G_CALLOUT_TMP0" #f)
(define-global "G_CALLOUT_TMP1" "G_CALLOUT_TMP1" #f)
(define-global "G_CALLOUT_TMP2" "G_CALLOUT_TMP2" #f)
(define-global "G_CACHE_FLUSH" "G_CACHE_FLUSH" #f)
(define-global "G_STKUFLOW" "G_STKUFLOW" #f)  ; stack underflow counting

;; Write barrier

(define-global "G_WBDEST"  "G_WBDEST"  #f)    ; write barrier mutated ptr
(define-global "G_WBVALUE" "G_WBVALUE" #f)    ; write barrier stored value
(define-global "G_SSBTOPV" "G_SSBTOPV" #f)    ; ssb top vector
(define-global "G_SSBLIMV" "G_SSBLIMV" #f)    ; ssb limit vector
(define-global "G_SATBTOPV" "G_SATBTOPV" #f)  ; SATB ssb top vector
(define-global "G_SATBLIMV" "G_SATBLIMV" #f)  ; SATB ssb limit vector
(define-global "G_GENV"    "G_GENV"    #f)    ; page descriptor table
(define-global "G_PGBASE"  "G_PGBASE"  #f)    ; page base
(define-global "G_WBPROF"  "G_WBPROF"  #f)    ; write barrier profiling

; Write barrier bit for C back-end: if 0, then barrier is off, otherwise
; barrier is on.

(define-global "G_BARRIER_ENABLE" #f #f)

; Concurrent mark thread bit; if 0, then marking thread is not running
; (and corresponding barrier is disabled).  Otherwise barrier is on.
(define-global "G_CONCURRENT_MARK" "G_CONCURRENT_MARK" "$g.concurrent-mark")

; Filter entries in the remembered sets based on generation # 
; When on, (gl <= gr) implies (don't include entry in remset)
(define-global "G_FILTER_REMSET_GEN_ORDER" "G_FILTER_REMSET_GEN_ORDER" #f)
; Filter remset entries that point to objects in gen#, or -1 if unused
(define-global "G_FILTER_REMSET_RHS_NUM" "G_FILTER_REMSET_RHS_NUM" #f)
; Filter remset entries where the source object is in gen#, or -1 if unused
(define-global "G_FILTER_REMSET_LHS_NUM" "G_FILTER_REMSET_LHS_NUM" #f)

; interrupt handling

(define-global "G_SIGNAL" "G_SIGNAL" #f)      ; some asynch. signal received
(define-global "G_SIGINT" "G_SIGINT" #f)      ; SIGINT received

(define-global "G_FPE_CODE" "G_FPE_CODE" #f)    ; SIGFPE data
(define-global "G_IDIV_CODE" "G_IDIV_CODE" #f)  ; integer division error code

; Scheme-to-scheme call non-roots

(define-global "G_SCHCALL_SAVERES" "G_SCHCALL_SAVERES" #f) ; save RESULT flag
(define-global "G_SCHCALL_RETADDR" "G_SCHCALL_RETADDR" #f) ; return address

; More timer support

(define-global "G_TIMER2" "G_TIMER2" #f)  ; secondary timer variable

; A temporary value.

(define-global "G_GENERIC_NRTMP4" "G_GENERIC_NRTMP4" #f)

; Floating-point registers.  At the moment there are four defined
; double-precision registers, F0 through F3.  These are always backed
; by hardware registers.  Probably we could up the number to eight.

(define-double "G_F0" "G_F0" "$g.f0")
(define-double "G_F1" "G_F1" "$g.f1")
(define-double "G_F2" "G_F2" "$g.f2")
(define-double "G_F3" "G_F3" "$g.f3")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Millicode procedures.

(define-mproc "M_EXCEPTION" "M_EXCEPTION" "$m.exception" "fmc_exception")
(define-mproc "M_MORECORE" "M_MORECORE" "$m.morecore" "fmc_morecore")
(define-mproc "M_STKOFLOW" "M_STKOFLOW" "$m.stkoflow" "fmc_stack_overflow")
(define-mproc "M_TIMER_EXCEPTION" "M_TIMER_EXCEPTION" "$m.timer-exception" "fmc_timer_exception")
(define-mproc "M_ADD"   "M_ADD" "$m.add" "fmc_add")
(define-mproc "M_SUB"   "M_SUBTRACT" "$m.subtract" "fmc_sub")
(define-mproc "M_NUMEQ" "M_NUMEQ" "$m.numeq" "fmc_equalp")
(define-mproc "M_ALLOC" "M_ALLOC" "$m.alloc" "fmc_alloc")
(define-mproc "M_ALLOCI" "M_ALLOCI" "$m.alloci" "fmc_alloci")
(define-mproc "M_ALLOC_BV" "M_ALLOC_BV" "$m.alloc-bv" "fmc_alloc_bv")
(define-mproc "M_CREG" "M_CREG" "$m.creg" "fmc_capture_continuation")
(define-mproc "M_CREG_SET" "M_CREG_SET" "$m.creg-set!" "fmc_restore_continuation")
(define-mproc "M_FULL_BARRIER" "M_FULL_BARRIER" "$m.full-barrier" "fmc_full_barrier")
(define-mproc "M_PARTIAL_BARRIER" "M_PARTIAL_BARRIER" "$m.partial-barrier" "fmc_partial_barrier")
(define-mproc "M_BREAK" "M_BREAK" "$m.break" "fmc_break")
(define-mproc "M_GLOBAL_EX" "M_GLOBAL_EX" "$m.global-ex" "fmc_global_exception")
(define-mproc "M_INVOKE_EX" "M_INVOKE_EX" "$m.invoke-ex" "fmc_invoke_exception")
(define-mproc "M_GLOBAL_INVOKE_EX" "M_GLOBAL_INVOKE_EX" "$m.global-invoke-ex"  "fmc_global_invoke_exception")
(define-mproc "M_ARGC_EX" "M_ARGC_EX" "$m.argc-ex" "fmc_argc_exception")
(define-mproc "M_EINTR" "M_ENABLE_INTERRUPTS" "$m.enable-interrupts" "fmc_enable_interrupts")
(define-mproc "M_DINTR" "M_DISABLE_INTERRUPTS" "$m.disable-interrupts" "fmc_disable_interrupts")
(define-mproc "M_APPLY" "M_APPLY" "$m.apply" "fmc_apply")
(define-mproc "M_VARARGS" "M_VARARGS" "$m.varargs" "fmc_restargs")
(define-mproc "M_SYSCALL" "M_SYSCALL" "$m.syscall" "fmc_syscall")
(define-mproc "M_TYPETAG" "M_TYPETAG" "$m.typetag" "fmc_typetag")
(define-mproc "M_TYPETAGSET" "M_TYPETAG_SET" "$m.typetag-set" "fmc_typetag_set")
(define-mproc "M_EQV" "M_EQV" "$m.eqv" "fmc_eqv")
(define-mproc "M_PARTIAL_LIST2VECTOR" "M_PARTIAL_LIST2VECTOR" "$m.partial-list->vector" "fmc_partial_list2vector")
(define-mproc "M_BVLFILL" "M_BYTEVECTOR_LIKE_FILL" "$m.bytevector-like-fill" "fmc_bytevector_like_fill")
(define-mproc "M_BVLCMP" "M_BYTEVECTOR_LIKE_COMPARE" "$m.bvlcmp" "fmc_bytevector_like_compare")
(define-mproc "M_MUL"   "M_MULTIPLY" "$m.multiply" "fmc_mul")
(define-mproc "M_DIV"   "M_DIVIDE" "$m.divide" "fmc_div")
(define-mproc "M_QUOT"  "M_QUOTIENT" "$m.quotient" "fmc_quo")
(define-mproc "M_REM"   "M_REMAINDER" "$m.remainder" "fmc_rem")
(define-mproc "M_NEG"   "M_NEGATE" "$m.negate" "fmc_neg")
(define-mproc "M_ABS"   "M_ABS" "$m.abs" "fmc_abs")
(define-mproc "M_NUMLT" "M_NUMLT" "$m.numlt" "fmc_lessp")
(define-mproc "M_NUMLE" "M_NUMLE" "$m.numle" "fmc_less_or_equalp")
(define-mproc "M_NUMGT" "M_NUMGT" "$m.numgt" "fmc_greaterp")
(define-mproc "M_NUMGE" "M_NUMGE" "$m.numge" "fmc_greater_or_equalp")
(define-mproc "M_EXACT2INEXACT" "M_EXACT2INEXACT" "$m.exact->inexact" "fmc_exact2inexact")
(define-mproc "M_INEXACT2EXACT" "M_INEXACT2EXACT" "$m.inexact->exact" "fmc_inexact2exact")
(define-mproc "M_REAL_PART" "M_REAL_PART" "$m.real-part" "fmc_real_part")
(define-mproc "M_IMAG_PART" "M_IMAG_PART" "$m.imag-part" "fmc_imag_part")
(define-mproc "M_ROUND" "M_ROUND" "$m.round" "fmc_round")
(define-mproc "M_TRUNCATE" "M_TRUNCATE" "$m.truncate" "fmc_truncate")
(define-mproc "M_ZEROP" "M_ZEROP" "$m.zerop" "fmc_zerop")
(define-mproc "M_COMPLEXP" "M_COMPLEXP" "$m.complexp" "fmc_complexp")
(define-mproc "M_RATIONALP" "M_RATIONALP" "$m.rationalp" "fmc_rationalp")
(define-mproc "M_INTEGERP" "M_INTEGERP" "$m.integerp" "fmc_integerp")
(define-mproc "M_EXACTP" "M_EXACTP" "$m.exactp" "fmc_exactp")
(define-mproc "M_INEXACTP" "M_INEXACTP" "$m.inexactp" "fmc_inexactp")
(define-mproc "M_SINGLESTEP" "M_SINGLESTEP" "$m.singlestep" "fmc_singlestep")

; eof
