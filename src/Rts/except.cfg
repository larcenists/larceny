; Copyright 1998 Lars T Hansen.    -*- mode: scheme; indent-tabs-mode: nil -*-
;
; $Id$
;
; Exception codes.

(define-files "except.ch" "except.ah" "ecodes.sch")

; Exception codes.

;(define-action assembly (lambda (x) (* x 4)))   ; Preformatted fixnums
(define-action assembly (lambda (x) 
                          (case (nbuild-parameter 'target-machine)
                            ((sparc) (* x 4)) ; Preformatted fixnums
                            (else x))))       ; UnPreformatted fixnums

;;; pairs (0-9)

(define-const car    0 "EX_CAR" "EX_CAR" "$ex.car")
(define-const cdr    1 "EX_CDR" "EX_CDR" "$ex.cdr")
(define-const setcar 2 "EX_SETCAR" "EX_SETCAR" "$ex.setcar")
(define-const setcdr 3 "EX_SETCDR" "EX_SETCDR" "$ex.setcdr")

;;; numbers (10-59)

(define-const plus      10 "EX_ADD" "EX_ADD" "$ex.add")
(define-const minus     11 "EX_SUB" "EX_SUB" "$ex.sub")
(define-const times     12 "EX_MUL" "EX_MUL" "$ex.mul")
(define-const divide    13 "EX_DIV" "EX_DIV" "$ex.div")
(define-const lt        14 "EX_LESSP" "EX_LESSP" "$ex.lessp")
(define-const le        15 "EX_LESSEQP" "EX_LESSEQP" "$ex.lesseqp")
(define-const eq        16 "EX_EQUALP" "EX_EQUALP" "$ex.equalp")
(define-const ge        17 "EX_GREATEREQP" "EX_GREATEREQP" "$ex.greatereqp")
(define-const gt        18 "EX_GREATERP" "EX_GREATERP" "$ex.greaterp")
(define-const quotient  19 "EX_QUOTIENT" "EX_QUOTIENT" "$ex.quotient")
(define-const remainder 20 "EX_REMAINDER" "EX_REMAINDER" "$ex.remainder")
(define-const modulo    21 "EX_MODULO" "EX_MODULO" "$ex.modulo")
(define-const logior    22 "EX_LOGIOR" "EX_LOGIOR" "$ex.logior")
(define-const logand    23 "EX_LOGAND" "EX_LOGAND" "$ex.logand")
(define-const logxor    24 "EX_LOGXOR" "EX_LOGXOR" "$ex.logxor")
(define-const lognot    25 "EX_LOGNOT" "EX_LOGNOT" "$ex.lognot")
(define-const lsh       26 "EX_LSH" "EX_LSH" "$ex.lsh")
(define-const rsha      27 "EX_RSHA" "EX_RSHA" "$ex.rsha")
(define-const rshl      28 "EX_RSHL" "EX_RSHL" "$ex.rshl")
(define-const e2i       29 "EX_E2I" "EX_E2I" "$ex.e2i")
(define-const i2e       30 "EX_I2E" "EX_I2E" "$ex.i2e")
(define-const exactp    31 "EX_EXACTP" "EX_EXACTP" "$ex.exactp")
(define-const inexactp  32 "EX_INEXACTP" "EX_INEXACTP" "$ex.inexactp")
(define-const round     33 "EX_ROUND" "EX_ROUND" "$ex.round")
(define-const trunc     34 "EX_TRUNC" "EX_TRUNC" "$ex.trunc")
(define-const zerop     35 "EX_ZEROP" "EX_ZEROP" "$ex.zerop")
(define-const neg       36 "EX_NEG" "EX_NEG" "$ex.neg")
(define-const abs       37 "EX_ABS" "EX_ABS" "$ex.abs")
(define-const realpart  38 "EX_REALPART" "EX_REALPART" "$ex.realpart")
(define-const imagpart  39 "EX_IMAGPART" "EX_IMAGPART" "$ex.imagpart")

;;; strings (60-65)

(define-const sref  60 "EX_STRING_REF" "EX_SREF" "$ex.sref")
(define-const sset  61 "EX_STRING_SET" "EX_SSET" "$ex.sset")
(define-const slen  62 "EX_STRING_LENGTH" "EX_SLEN" "$ex.slen")
(define-const mkstr 63 "EX_MAKE_STRING" "EX_MKSTR" "$ex.mkstr")

;;; immutable texts (66-69)

(define-const tref  66 "EX_TEXT_REF" "EX_TREF" "$ex.tref")
(define-const tlen  67 "EX_TEXT_LENGTH" "EX_TLEN" "$ex.tlen")

;;; bytevectors (70-79)

(define-const bvref  70 "EX_BYTEVECTOR_REF" "EX_BVREF" "$ex.bvref")
(define-const bvset  71 "EX_BYTEVECTOR_SET" "EX_BVSET" "$ex.bvset")
(define-const bvlen  72 "EX_BYTEVECTOR_LENGTH" "EX_BVLEN" "$ex.bvlen")
(define-const mkbvl  73 "EX_MKBVL" "EX_MKBVL" "$ex.mkbvl")  ; mis-named
(define-const bvfill 74 "EX_BVFILL" "EX_BVFILL" "$ex.bvfill")

;;; bytevector-like (80-89)

(define-const bvlref 80 "EX_BVLREF" "EX_BVLREF" "$ex.bvlref")
(define-const bvlset 81 "EX_BVLSET" "EX_BVLSET" "$ex.bvlset")
(define-const bvllen 82 "EX_BVLLEN" "EX_BVLLEN" "$ex.bvllen")

;;; vector-like (90-99)

(define-const vlref 90 "EX_VLREF" "EX_VLREF" "$ex.vlref")
(define-const vlset 91 "EX_VLSET" "EX_VLSET" "$ex.vlset")
(define-const vllen 92 "EX_VLLEN" "EX_VLLEN" "$ex.vllen")

;;; Miscellaneous (100-109)

(define-const typetag    100 "EX_TYPETAG" "EX_TYPETAG" "$ex.typetag")
(define-const typetagset 101 "EX_TYPETAGSET" "EX_TYPETAGSET" "$ex.typetagset")
(define-const enableintr 102 "EX_EINTR" "EX_EINTR" "$ex.enable-interrupts")
(define-const dump       103 "EX_DUMP" "EX_DUMP" "$ex.dump")
(define-const dumpfail   104 "EX_DUMPFAIL" "EX_DUMPFAIL" "$ex.dumpfail")
(define-const unsupp     105 "EX_UNSUPPORTED" 
                             "EX_UNSUPPORTED" 
                             "$ex.unsupported")
(define-const undef-global 106 "EX_UNDEF_GLOBAL" 
                               "EX_UNDEF_GLOBAL"
                               "$ex.undef-global")
(define-const assert     107 "EX_ASSERT" "EX_ASSERT" "$ex.assert")

;;; I/O (110-119)

(define-const get-u8     110 "EX_GET_U8" "EX_GET_U8" "$ex.get-u8")
(define-const put-u8     111 "EX_PUT_U8" "EX_PUT_U8" "$ex.put-u8")
(define-const get-char   112 "EX_GET_CHAR" "EX_GET_CHAR" "$ex.get-char")
(define-const put-char   113 "EX_PUT_CHAR" "EX_PUT_CHAR" "$ex.put-char")


;;; Procedure calls (120-129)

(define-const apply      120 "EX_APPLY" "EX_APPLY" "$ex.apply")
(define-const argc       121 "EX_ARGSEQ" "EX_ARGC" "$ex.argc")
(define-const vargc      122 "EX_ARGSGE" "EX_VARGC" "$ex.vargc")
(define-const nonproc    123 "EX_NONPROC" "EX_NONPROC" "$ex.nonproc")
(define-const global-invoke 124 "EX_GLOBAL_INVOKE"
                                "EX_GLOBAL_INVOKE"
                                "$ex.global-invoke")

;;; Characters (130-139)

(define-const int2char 130 "EX_INT2CHAR" "EX_INT2CHAR" "$ex.int2char")
(define-const char2int 131 "EX_CHAR2INT" "EX_CHAR2INT" "$ex.char2int")
(define-const charlt 132 "EX_CHARLT" "EX_CHARLT" "$ex.char<?")
(define-const charle 133 "EX_CHARLE" "EX_CHARLE" "$ex.char<=?")
(define-const chareq 134 "EX_CHAREQ" "EX_CHAREQ" "$ex.char=?")
(define-const chargt 135 "EX_CHARGT" "EX_CHARGT" "$ex.char>?")
(define-const charge 136 "EX_CHARGE" "EX_CHARGE" "$ex.char>=?")

;;; Fixnums (140-159)

(define-const fx+  140 "EX_FXADD" "EX_FXADD" "$ex.fx+")
(define-const fx-  141 "EX_FXSUB" "EX_FXSUB" "$ex.fx-")
(define-const fx-- 142 "EX_FXNEG" "EX_FXNEG" "$ex.fx--")
(define-const fx=  143 "EX_FXEQ"  "EX_FXEQ"  "$ex.fx=")
(define-const fx<  144 "EX_FXLT"  "EX_FXLT"  "$ex.fx<")
(define-const fx<= 145 "EX_FXLE"  "EX_FXLE"  "$ex.fx<=")
(define-const fx>  146 "EX_FXGT"  "EX_FXGT"  "$ex.fx>")
(define-const fx>= 147 "EX_FXGE"  "EX_FXGE"  "$ex.fx>=")
(define-const fxpositive? 148 "EX_FXPOSITIVE" 
                              "EX_FXPOSITIVE" 
                              "$ex.fxpositive?")
(define-const fxnegative? 149 "EX_FXNEGATIVE"
                              "EX_FXNEGATIVE"
                              "$ex.fxnegative?")
(define-const fxzero?     150 "EX_FXZERO"
                              "EX_FXZERO" 
                              "$ex.fxzero?")
(define-const fxmul 151 "EX_FXMUL" "EX_FXMUL" "$ex.fx*")

;;; Vectors (160-169)

(define-const vref 160 "EX_VECTOR_REF" "EX_VREF" "$ex.vref")
(define-const vset 161 "EX_VECTOR_SET" "EX_VSET" "$ex.vset")
(define-const vlen 162 "EX_VECTOR_LENGTH" "EX_VLEN" "$ex.vlen")
(define-const mkvl 163 "EX_MKVL" "EX_MKVL" "$ex.mkvl")  ; mis-named

;;; Procedures (170-179)

(define-const pref 170 "EX_PROCEDURE_REF" "EX_PREF" "$ex.pref")
(define-const pset 171 "EX_PROCEDURE_SET" "EX_PSET" "$ex.pset")
(define-const plen 172 "EX_PROCEDURE_LENGTH" "EX_PLEN" "$ex.plen")

;;; Flonums (180-197)

(define-const fl+  180 "EX_FLADD" "EX_FLADD" "$ex.fl+")
(define-const fl-  181 "EX_FLSUB" "EX_FLSUB" "$ex.fl-")
(define-const fl-- 182 "EX_FLNEG" "EX_FLNEG" "$ex.fl--")
(define-const fl=  183 "EX_FLEQ"  "EX_FLEQ"  "$ex.fl=")
(define-const fl<  184 "EX_FLLT"  "EX_FLLT"  "$ex.fl<")
(define-const fl<= 185 "EX_FLLE"  "EX_FLLE"  "$ex.fl<=")
(define-const fl>  186 "EX_FLGT"  "EX_FLGT"  "$ex.fl>")
(define-const fl>= 187 "EX_FLGE"  "EX_FLGE"  "$ex.fl>=")
(define-const fl*  188 "EX_FLMUL" "EX_FLMUL" "$ex.fl*")
(define-const fl/  189 "EX_FLDIV" "EX_FLDIV" "$ex.fl/")
(define-const flfloor 190 "EX_FLFLOOR" "EX_FLFLOOR" "$ex.flfloor")
(define-const flceiling 191 "EX_FLCEILING" "EX_FLCEILING" "$ex.flceiling")
(define-const fltruncate 192 "EX_FLTRUNCATE" "EX_FLTRUNCATE" "$ex.fltruncate")
(define-const flround 193 "EX_FLROUND" "EX_FLROUND" "$ex.flround")

;;; Records (198)

(define-const record 198 "EX_RECORD" "EX_RECORD" "$ex.record")

;;; Housekeeping/RTS/meta (200-220)

(define-const sigint 200 "EX_KBDINTR" "EX_KBDINTR" "$ex.keyboard-interrupt")
(define-const sigfpe 201 "EX_FPE" "EX_FPE" "$ex.arithmetic-exception")
(define-const breakpoint 202 "EX_BREAKPOINT" "EX_BREAKPOINT" "$ex.breakpoint")
(define-const signal 203 "EX_SIGNAL" "EX_SIGNAL" "$ex.signal")
(define-const timer 204 "EX_TIMER" "EX_TIMER" "$ex.timer")
(define-const alloc 205 "EX_ALLOC" "EX_ALLOC" "$ex.alloc")

; eof
